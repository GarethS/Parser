                                                                                                            
FunctionDefn: main
Statement:
*LEFT Var: index,2 name,count
*RIGHT Var: index,1 name,0
ROOT Operator: = 262
Statement:
*LEFT Var: index,4 name,on
*RIGHT Var: index,3 name,1
ROOT Operator: = 262
Statement:
*LEFT Var: index,5 name,x
*RIGHT Var: index,1 name,0
ROOT Operator: = 262
Statement:
ROOT
While 0
**LEFT Var: index,2 name,count
**RIGHT Var: index,6 name,4
*LEFT Operator: < 285
If EVALWHILE == 0 JMP EndWhile 0
Statement:
*LEFT Var: index,4 name,on
*RIGHT Var: index,3 name,1
ROOT Operator: = 262
Statement:
ROOT FunctionCall: index,7 name,LED
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,4 name,on 
FunctionCallEnd: index,7 name,LED
Statement:
*LEFT Var: index,4 name,on
*RIGHT Var: index,1 name,0
ROOT Operator: = 262
Statement:
ROOT FunctionCall: index,9 name,sleep
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,8 name,1000 
FunctionCallEnd: index,9 name,sleep
Statement:
ROOT FunctionCall: index,7 name,LED
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,4 name,on 
FunctionCallEnd: index,7 name,LED
Statement:
ROOT FunctionCall: index,9 name,sleep
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,8 name,1000 
FunctionCallEnd: index,9 name,sleep
Statement:
*LEFT Var: index,2 name,count
**LEFT Var: index,2 name,count
**RIGHT Var: index,3 name,1
*RIGHT Operator: + 293
ROOT Operator: = 262
EndWhile 0
ProgramEnd

Symbol table start:
index:0, name:main, type:16, val:0, fcnLink:0
index:1, name:0, type:1, val:0
index:2, name:count, type:0, val:0
index:3, name:1, type:1, val:1
index:4, name:on, type:0, val:0
index:5, name:x, type:0, val:0
index:6, name:4, type:1, val:4
index:7, name:LED, type:15, val:2, fcnLink:-6
index:8, name:1000, type:1, val:1000
index:9, name:sleep, type:15, val:2, fcnLink:-4
Symbol table end:
