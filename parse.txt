                                                                                                                                                                                                                              
FunctionDefn: main
Statement:
ROOT
If 2
***LEFT Var: index,1 name,counter
***RIGHT Var: index,2 name,4
**LEFT Operator: <= 284
***LEFT Var: index,3 name,x
***RIGHT Var: index,4 name,1
**RIGHT Operator: > 282
*LEFT Operator: && 280
If EVAL == 0 JMP Else 2
Statement:
*LEFT Var: index,1 name,counter
*RIGHT Var: index,5 name,5
ROOT Operator: = 262
Statement:
*LEFT Var: index,1 name,counter
*RIGHT Var: index,6 name,6
ROOT Operator: = 262
Statement:
*LEFT Var: index,1 name,counter
*RIGHT Var: index,6 name,6
ROOT Operator: = 262
Statement:
ROOT
If 0
**LEFT Var: index,3 name,x
**RIGHT Var: index,7 name,2
*LEFT Operator: == 286
If EVAL == 0 JMP Else 0
Statement:
*LEFT Var: index,1 name,counter
*RIGHT Var: index,2 name,4
ROOT Operator: = 262
JMP EndIf 0
Else 0
EndIf 0
Statement:
ROOT
While 1
**LEFT Var: index,8 name,d
**RIGHT Var: index,9 name,3
*LEFT Operator: == 286
If EVAL == 0 JMP EndWhile 1
Statement:
*LEFT Var: index,8 name,d
***LEFT Var: index,8 name,d
***RIGHT Var: index,4 name,1
**LEFT Operator: + 289
**RIGHT Var: index,8 name,d
*RIGHT Operator: + 289
ROOT Operator: = 262
EndWhile 1
JMP EndIf 2
Else 2
Statement:
*LEFT Var: index,1 name,counter
*RIGHT Var: index,10 name,7
ROOT Operator: = 262
Statement:
*LEFT Var: index,3 name,x
*RIGHT Var: index,10 name,7
ROOT Operator: = 262
Statement:
ROOT FunctionCall: index,11 name,foo
Statement:
ROOT Var: index,4 name,1
Statement:
*LEFT Var: index,7 name,2
*RIGHT Var: index,3 name,x
ROOT Operator: + 289
Statement:
ROOT Var: index,9 name,3 
FunctionCallEnd: index,11 name,foo
Statement:
*LEFT Var: index,12 name,q
*RIGHT Var: index,3 name,x
ROOT Operator: = 262
Statement:
ROOT FunctionCall: index,13 name,moveAbsolute
Statement:
ROOT Var: index,3 name,x
Statement:
ROOT Var: index,7 name,2 
FunctionCallEnd: index,13 name,moveAbsolute
EndIf 2
ProgramEnd	               
FunctionDefn: foo
Statement:
*LEFT Var: index,16 name,y
*RIGHT Var: index,18 name,3
ROOT Operator: = 262
Statement:
*LEFT Var: index,19 name,b
*RIGHT Var: index,15 name,x
ROOT Operator: = 262               
FunctionDefn: bar
Statement:
*LEFT Var: index,25 name,n
*RIGHT Var: index,24 name,3
ROOT Operator: = 262
Statement:
*LEFT Var: index,22 name,b
*RIGHT Var: index,26 name,x
ROOT Operator: = 262

Symbol table start:
index:0, name:main, type:16, val:0, fcnLink:0
index:1, name:counter, type:0, val:0
index:2, name:4, type:1, val:4
index:3, name:x, type:0, val:0
index:4, name:1, type:1, val:1
index:5, name:5, type:1, val:5
index:6, name:6, type:1, val:6
index:7, name:2, type:1, val:2
index:8, name:d, type:0, val:0
index:9, name:3, type:1, val:3
index:10, name:7, type:1, val:7
index:11, name:foo, type:15, val:3, fcnLink:67
index:12, name:q, type:0, val:0
index:13, name:moveAbsolute, type:15, val:2, fcnLink:-2
index:14, name:foo, type:16, val:3, fcnLink:67
index:15, name:x, type:12, val:0
index:16, name:y, type:13, val:1
index:17, name:z, type:12, val:2
index:18, name:3, type:1, val:3
index:19, name:b, type:0, val:0
index:20, name:bar, type:16, val:3, fcnLink:74
index:21, name:a, type:12, val:0
index:22, name:b, type:12, val:1
index:23, name:c, type:12, val:2
index:24, name:3, type:1, val:3
index:25, name:n, type:0, val:0
index:26, name:x, type:0, val:0
Symbol table end:
