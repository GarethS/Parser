                                                                                                                                                                                                                       
FunctionDefn: main
Statement:
*LEFT Var: index,2 name,count
*RIGHT Var: index,1 name,0
ROOT Operator: = 261
Statement:
*LEFT Var: index,4 name,on
*RIGHT Var: index,3 name,1
ROOT Operator: = 261
Statement:
*LEFT Var: index,5 name,x
*RIGHT Var: index,1 name,0
ROOT Operator: = 261
Statement:
*LEFT Var: index,7 name,limit
*RIGHT Var: index,6 name,4
ROOT Operator: = 261
Statement:
*LEFT Var: index,9 name,moveDistance
*RIGHT Var: index,8 name,1000
ROOT Operator: = 261
Statement:
ROOT
While 1
**LEFT Var: index,2 name,count
**RIGHT Var: index,10 name,142
*LEFT Operator: < 284
If EVALWHILE == 0 JMP EndWhile 1
Statement:
*LEFT Var: index,4 name,on
**LEFT Var: index,4 name,on
*RIGHT Operator: ! 300
ROOT Operator: = 261
Statement:
ROOT FunctionCall: index,11 name,LED
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,4 name,on 
FunctionCallEnd: index,11 name,LED
Statement:
*LEFT Var: index,4 name,on
**LEFT Var: index,4 name,on
*RIGHT Operator: ! 300
ROOT Operator: = 261
Statement:
ROOT FunctionCall: index,12 name,sleep
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,8 name,1000 
FunctionCallEnd: index,12 name,sleep
Statement:
ROOT FunctionCall: index,11 name,LED
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,4 name,on 
FunctionCallEnd: index,11 name,LED
Statement:
ROOT FunctionCall: index,12 name,sleep
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,8 name,1000 
FunctionCallEnd: index,12 name,sleep
Statement:
*LEFT Var: index,2 name,count
**LEFT Var: index,2 name,count
**RIGHT Var: index,3 name,1
*RIGHT Operator: + 292
ROOT Operator: = 261
Statement:
ROOT
If 0
**LEFT Var: index,2 name,count
**RIGHT Var: index,7 name,limit
*LEFT Operator: > 285
If EVAL == 0 JMP Else 0
Statement:
*LEFT Var: index,14 name,moveBack
**LEFT Var: index,9 name,moveDistance
***LEFT Var: index,7 name,limit
***RIGHT Var: index,13 name,-1
**RIGHT Operator: * 295
*RIGHT Operator: * 295
ROOT Operator: = 261
Statement:
ROOT FunctionCall: index,15 name,moveRelative
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,14 name,moveBack 
FunctionCallEnd: index,15 name,moveRelative
Statement:
*LEFT Var: index,2 name,count
*RIGHT Var: index,1 name,0
ROOT Operator: = 261
Statement:
ROOT FunctionCall: index,12 name,sleep
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,16 name,4000 
FunctionCallEnd: index,12 name,sleep
JMP EndIf 0
Else 0
Statement:
ROOT FunctionCall: index,15 name,moveRelative
Statement:
ROOT Var: index,5 name,x
Statement:
ROOT Var: index,9 name,moveDistance 
FunctionCallEnd: index,15 name,moveRelative
EndIf 0
EndWhile 1
ProgramEnd

Symbol table start:
index:0, name:main, type:16, val:0, fcnLink:0
index:1, name:0, type:1, val:0
index:2, name:count, type:0, val:0
index:3, name:1, type:1, val:1
index:4, name:on, type:0, val:0
index:5, name:x, type:0, val:0
index:6, name:4, type:1, val:4
index:7, name:limit, type:0, val:0
index:8, name:1000, type:1, val:1000
index:9, name:moveDistance, type:0, val:0
index:10, name:142, type:1, val:142
index:11, name:LED, type:15, val:2, fcnLink:-6
index:12, name:sleep, type:15, val:2, fcnLink:-4
index:13, name:-1, type:1, val:-1
index:14, name:moveBack, type:0, val:0
index:15, name:moveRelative, type:15, val:2, fcnLink:-3
index:16, name:4000, type:1, val:4000
Symbol table end:
