Grammar

    0 $accept: program $end

    1 program: statement
    2        | symbol
    3        | version
    4        | PROGRAMEND

    5 position: CONST
    6         | LEFT
    7         | RIGHT
    8         | ROOT

    9 action: VARIABLE
   10       | OPERATOR
   11       | IF
   12       | EVAL0
   13       | EVALWHILE0
   14       | ELSE
   15       | ENDIF
   16       | WHILE
   17       | ENDWHILE
   18       | FUNCTIONCALL
   19       | FUNCTIONCALLEND
   20       | JMPENDIF
   21       | START
   22       | PROGRAMEND

   23 version: VERSION_BEGIN CONST VERSION_END

   24 statement: STATEMENT_BEGIN CONST position action CONST STATEMENT_END

   25 symbol: SYMBOL_BEGIN CONST CONST CONST SYMBOL_END


Terminals, with rules where they appear

$end (0) 0
error (256)
VERSION_BEGIN (258) 23
VERSION_END (259) 23
STATEMENT_BEGIN (260) 24
STATEMENT_END (261) 24
SYMBOL_BEGIN (262) 25
SYMBOL_END (263) 25
ROOT (264) 8
LEFT (265) 6
RIGHT (266) 7
VARIABLE (267) 9
OPERATOR (268) 10
IF (269) 11
EVAL0 (270) 12
EVALWHILE0 (271) 13
ELSE (272) 14
ENDIF (273) 15
WHILE (274) 16
ENDWHILE (275) 17
FUNCTIONCALL (276) 18
FUNCTIONCALLEND (277) 19
JMPENDIF (278) 20
START (279) 21
PROGRAMEND (280) 4 22
CONST (281) 5 23 24 25


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
program (28)
    on left: 1 2 3 4, on right: 0
position (29)
    on left: 5 6 7 8, on right: 24
action (30)
    on left: 9 10 11 12 13 14 15 16 17 18 19 20 21 22, on right: 24
version (31)
    on left: 23, on right: 3
statement (32)
    on left: 24, on right: 1
symbol (33)
    on left: 25, on right: 2


state 0

    0 $accept: . program $end

    VERSION_BEGIN    shift, and go to state 1
    STATEMENT_BEGIN  shift, and go to state 2
    SYMBOL_BEGIN     shift, and go to state 3
    PROGRAMEND       shift, and go to state 4

    program    go to state 5
    version    go to state 6
    statement  go to state 7
    symbol     go to state 8


state 1

   23 version: VERSION_BEGIN . CONST VERSION_END

    CONST  shift, and go to state 9


state 2

   24 statement: STATEMENT_BEGIN . CONST position action CONST STATEMENT_END

    CONST  shift, and go to state 10


state 3

   25 symbol: SYMBOL_BEGIN . CONST CONST CONST SYMBOL_END

    CONST  shift, and go to state 11


state 4

    4 program: PROGRAMEND .

    $default  reduce using rule 4 (program)


state 5

    0 $accept: program . $end

    $end  shift, and go to state 12


state 6

    3 program: version .

    $default  reduce using rule 3 (program)


state 7

    1 program: statement .

    $default  reduce using rule 1 (program)


state 8

    2 program: symbol .

    $default  reduce using rule 2 (program)


state 9

   23 version: VERSION_BEGIN CONST . VERSION_END

    VERSION_END  shift, and go to state 13


state 10

   24 statement: STATEMENT_BEGIN CONST . position action CONST STATEMENT_END

    ROOT   shift, and go to state 14
    LEFT   shift, and go to state 15
    RIGHT  shift, and go to state 16
    CONST  shift, and go to state 17

    position  go to state 18


state 11

   25 symbol: SYMBOL_BEGIN CONST . CONST CONST SYMBOL_END

    CONST  shift, and go to state 19


state 12

    0 $accept: program $end .

    $default  accept


state 13

   23 version: VERSION_BEGIN CONST VERSION_END .

    $default  reduce using rule 23 (version)


state 14

    8 position: ROOT .

    $default  reduce using rule 8 (position)


state 15

    6 position: LEFT .

    $default  reduce using rule 6 (position)


state 16

    7 position: RIGHT .

    $default  reduce using rule 7 (position)


state 17

    5 position: CONST .

    $default  reduce using rule 5 (position)


state 18

   24 statement: STATEMENT_BEGIN CONST position . action CONST STATEMENT_END

    VARIABLE         shift, and go to state 20
    OPERATOR         shift, and go to state 21
    IF               shift, and go to state 22
    EVAL0            shift, and go to state 23
    EVALWHILE0       shift, and go to state 24
    ELSE             shift, and go to state 25
    ENDIF            shift, and go to state 26
    WHILE            shift, and go to state 27
    ENDWHILE         shift, and go to state 28
    FUNCTIONCALL     shift, and go to state 29
    FUNCTIONCALLEND  shift, and go to state 30
    JMPENDIF         shift, and go to state 31
    START            shift, and go to state 32
    PROGRAMEND       shift, and go to state 33

    action  go to state 34


state 19

   25 symbol: SYMBOL_BEGIN CONST CONST . CONST SYMBOL_END

    CONST  shift, and go to state 35


state 20

    9 action: VARIABLE .

    $default  reduce using rule 9 (action)


state 21

   10 action: OPERATOR .

    $default  reduce using rule 10 (action)


state 22

   11 action: IF .

    $default  reduce using rule 11 (action)


state 23

   12 action: EVAL0 .

    $default  reduce using rule 12 (action)


state 24

   13 action: EVALWHILE0 .

    $default  reduce using rule 13 (action)


state 25

   14 action: ELSE .

    $default  reduce using rule 14 (action)


state 26

   15 action: ENDIF .

    $default  reduce using rule 15 (action)


state 27

   16 action: WHILE .

    $default  reduce using rule 16 (action)


state 28

   17 action: ENDWHILE .

    $default  reduce using rule 17 (action)


state 29

   18 action: FUNCTIONCALL .

    $default  reduce using rule 18 (action)


state 30

   19 action: FUNCTIONCALLEND .

    $default  reduce using rule 19 (action)


state 31

   20 action: JMPENDIF .

    $default  reduce using rule 20 (action)


state 32

   21 action: START .

    $default  reduce using rule 21 (action)


state 33

   22 action: PROGRAMEND .

    $default  reduce using rule 22 (action)


state 34

   24 statement: STATEMENT_BEGIN CONST position action . CONST STATEMENT_END

    CONST  shift, and go to state 36


state 35

   25 symbol: SYMBOL_BEGIN CONST CONST CONST . SYMBOL_END

    SYMBOL_END  shift, and go to state 37


state 36

   24 statement: STATEMENT_BEGIN CONST position action CONST . STATEMENT_END

    STATEMENT_END  shift, and go to state 38


state 37

   25 symbol: SYMBOL_BEGIN CONST CONST CONST SYMBOL_END .

    $default  reduce using rule 25 (symbol)


state 38

   24 statement: STATEMENT_BEGIN CONST position action CONST STATEMENT_END .

    $default  reduce using rule 24 (statement)
