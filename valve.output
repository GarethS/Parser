Terminals unused in grammar

   INPUTS
   OUTPUTS
   COMMA
   BANG
   NEQ


State 43 conflicts: 5 shift/reduce


Grammar

    0 $accept: program $end

    1 program: patternActionList

    2 patternActionList: /* empty */
    3                  | patternActionList patternAction

    4 patternAction: pattern LBRACE action RBRACE

    5 action: /* empty */
    6       | action statementAction

    7 statementAction: var EQUAL arithmeticExpression SEMI

    8 pattern: LPAREN pattern RPAREN
    9        | pattern binaryPredicate patternCompare
   10        | patternCompare

   11 patternCompare: var operandTest arithmeticExpression
   12               | identifier

   13 arithmeticExpression: LPAREN arithmeticExpression RPAREN
   14                     | arithmeticExpression operator arithmeticExpression
   15                     | identifier

   16 identifier: var
   17           | CONST

   18 var: VAR
   19    | VAR_METHOD

   20 binaryPredicate: AND
   21                | OR

   22 operandTest: TEST_FOR_EQUAL
   23            | GEQ
   24            | LEQ
   25            | GTR
   26            | LSS

   27 operator: PLUS
   28         | MINUS
   29         | MULT
   30         | DIV
   31         | XOR


Terminals, with rules where they appear

$end (0) 0
error (256)
INPUTS (258)
OUTPUTS (259)
COMMA (260)
BANG (261)
EQUAL (262) 7
PLUS (263) 27
MINUS (264) 28
MULT (265) 29
DIV (266) 30
XOR (267) 31
GEQ (268) 23
LEQ (269) 24
NEQ (270)
GTR (271) 25
LSS (272) 26
AND (273) 20
OR (274) 21
TEST_FOR_EQUAL (275) 22
SEMI (276) 7
LBRACE (277) 4
RBRACE (278) 4
LPAREN (279) 8 13
RPAREN (280) 8 13
VAR (281) 18
VAR_METHOD (282) 19
CONST (283) 17


Nonterminals, with rules where they appear

$accept (29)
    on left: 0
program (30)
    on left: 1, on right: 0
patternActionList (31)
    on left: 2 3, on right: 1 3
patternAction (32)
    on left: 4, on right: 3
action (33)
    on left: 5 6, on right: 4 6
statementAction (34)
    on left: 7, on right: 6
pattern (35)
    on left: 8 9 10, on right: 4 8 9
patternCompare (36)
    on left: 11 12, on right: 9 10
arithmeticExpression (37)
    on left: 13 14 15, on right: 7 11 13 14
identifier (38)
    on left: 16 17, on right: 12 15
var (39)
    on left: 18 19, on right: 7 11 16
binaryPredicate (40)
    on left: 20 21, on right: 9
operandTest (41)
    on left: 22 23 24 25 26, on right: 11
operator (42)
    on left: 27 28 29 30 31, on right: 14


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (patternActionList)

    program            go to state 1
    patternActionList  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: patternActionList .
    3 patternActionList: patternActionList . patternAction

    LPAREN      shift, and go to state 4
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    $default  reduce using rule 1 (program)

    patternAction   go to state 8
    pattern         go to state 9
    patternCompare  go to state 10
    identifier      go to state 11
    var             go to state 12


state 3

    0 $accept: program $end .

    $default  accept


state 4

    8 pattern: LPAREN . pattern RPAREN

    LPAREN      shift, and go to state 4
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    pattern         go to state 13
    patternCompare  go to state 10
    identifier      go to state 11
    var             go to state 12


state 5

   18 var: VAR .

    $default  reduce using rule 18 (var)


state 6

   19 var: VAR_METHOD .

    $default  reduce using rule 19 (var)


state 7

   17 identifier: CONST .

    $default  reduce using rule 17 (identifier)


state 8

    3 patternActionList: patternActionList patternAction .

    $default  reduce using rule 3 (patternActionList)


state 9

    4 patternAction: pattern . LBRACE action RBRACE
    9 pattern: pattern . binaryPredicate patternCompare

    AND     shift, and go to state 14
    OR      shift, and go to state 15
    LBRACE  shift, and go to state 16

    binaryPredicate  go to state 17


state 10

   10 pattern: patternCompare .

    $default  reduce using rule 10 (pattern)


state 11

   12 patternCompare: identifier .

    $default  reduce using rule 12 (patternCompare)


state 12

   11 patternCompare: var . operandTest arithmeticExpression
   16 identifier: var .

    GEQ             shift, and go to state 18
    LEQ             shift, and go to state 19
    GTR             shift, and go to state 20
    LSS             shift, and go to state 21
    TEST_FOR_EQUAL  shift, and go to state 22

    $default  reduce using rule 16 (identifier)

    operandTest  go to state 23


state 13

    8 pattern: LPAREN pattern . RPAREN
    9        | pattern . binaryPredicate patternCompare

    AND     shift, and go to state 14
    OR      shift, and go to state 15
    RPAREN  shift, and go to state 24

    binaryPredicate  go to state 17


state 14

   20 binaryPredicate: AND .

    $default  reduce using rule 20 (binaryPredicate)


state 15

   21 binaryPredicate: OR .

    $default  reduce using rule 21 (binaryPredicate)


state 16

    4 patternAction: pattern LBRACE . action RBRACE

    $default  reduce using rule 5 (action)

    action  go to state 25


state 17

    9 pattern: pattern binaryPredicate . patternCompare

    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    patternCompare  go to state 26
    identifier      go to state 11
    var             go to state 12


state 18

   23 operandTest: GEQ .

    $default  reduce using rule 23 (operandTest)


state 19

   24 operandTest: LEQ .

    $default  reduce using rule 24 (operandTest)


state 20

   25 operandTest: GTR .

    $default  reduce using rule 25 (operandTest)


state 21

   26 operandTest: LSS .

    $default  reduce using rule 26 (operandTest)


state 22

   22 operandTest: TEST_FOR_EQUAL .

    $default  reduce using rule 22 (operandTest)


state 23

   11 patternCompare: var operandTest . arithmeticExpression

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 28
    identifier            go to state 29
    var                   go to state 30


state 24

    8 pattern: LPAREN pattern RPAREN .

    $default  reduce using rule 8 (pattern)


state 25

    4 patternAction: pattern LBRACE action . RBRACE
    6 action: action . statementAction

    RBRACE      shift, and go to state 31
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6

    statementAction  go to state 32
    var              go to state 33


state 26

    9 pattern: pattern binaryPredicate patternCompare .

    $default  reduce using rule 9 (pattern)


state 27

   13 arithmeticExpression: LPAREN . arithmeticExpression RPAREN

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 34
    identifier            go to state 29
    var                   go to state 30


state 28

   11 patternCompare: var operandTest arithmeticExpression .
   14 arithmeticExpression: arithmeticExpression . operator arithmeticExpression

    PLUS   shift, and go to state 35
    MINUS  shift, and go to state 36
    MULT   shift, and go to state 37
    DIV    shift, and go to state 38
    XOR    shift, and go to state 39

    $default  reduce using rule 11 (patternCompare)

    operator  go to state 40


state 29

   15 arithmeticExpression: identifier .

    $default  reduce using rule 15 (arithmeticExpression)


state 30

   16 identifier: var .

    $default  reduce using rule 16 (identifier)


state 31

    4 patternAction: pattern LBRACE action RBRACE .

    $default  reduce using rule 4 (patternAction)


state 32

    6 action: action statementAction .

    $default  reduce using rule 6 (action)


state 33

    7 statementAction: var . EQUAL arithmeticExpression SEMI

    EQUAL  shift, and go to state 41


state 34

   13 arithmeticExpression: LPAREN arithmeticExpression . RPAREN
   14                     | arithmeticExpression . operator arithmeticExpression

    PLUS    shift, and go to state 35
    MINUS   shift, and go to state 36
    MULT    shift, and go to state 37
    DIV     shift, and go to state 38
    XOR     shift, and go to state 39
    RPAREN  shift, and go to state 42

    operator  go to state 40


state 35

   27 operator: PLUS .

    $default  reduce using rule 27 (operator)


state 36

   28 operator: MINUS .

    $default  reduce using rule 28 (operator)


state 37

   29 operator: MULT .

    $default  reduce using rule 29 (operator)


state 38

   30 operator: DIV .

    $default  reduce using rule 30 (operator)


state 39

   31 operator: XOR .

    $default  reduce using rule 31 (operator)


state 40

   14 arithmeticExpression: arithmeticExpression operator . arithmeticExpression

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 43
    identifier            go to state 29
    var                   go to state 30


state 41

    7 statementAction: var EQUAL . arithmeticExpression SEMI

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 44
    identifier            go to state 29
    var                   go to state 30


state 42

   13 arithmeticExpression: LPAREN arithmeticExpression RPAREN .

    $default  reduce using rule 13 (arithmeticExpression)


state 43

   14 arithmeticExpression: arithmeticExpression . operator arithmeticExpression
   14                     | arithmeticExpression operator arithmeticExpression .

    PLUS   shift, and go to state 35
    MINUS  shift, and go to state 36
    MULT   shift, and go to state 37
    DIV    shift, and go to state 38
    XOR    shift, and go to state 39

    PLUS      [reduce using rule 14 (arithmeticExpression)]
    MINUS     [reduce using rule 14 (arithmeticExpression)]
    MULT      [reduce using rule 14 (arithmeticExpression)]
    DIV       [reduce using rule 14 (arithmeticExpression)]
    XOR       [reduce using rule 14 (arithmeticExpression)]
    $default  reduce using rule 14 (arithmeticExpression)

    operator  go to state 40


state 44

    7 statementAction: var EQUAL arithmeticExpression . SEMI
   14 arithmeticExpression: arithmeticExpression . operator arithmeticExpression

    PLUS   shift, and go to state 35
    MINUS  shift, and go to state 36
    MULT   shift, and go to state 37
    DIV    shift, and go to state 38
    XOR    shift, and go to state 39
    SEMI   shift, and go to state 45

    operator  go to state 40


state 45

    7 statementAction: var EQUAL arithmeticExpression SEMI .

    $default  reduce using rule 7 (statementAction)
