Terminals unused in grammar

   INPUTS
   OUTPUTS
   BANG
   VAR_METHOD
   CONST_FLOAT


Grammar

    0 $accept: program $end

    1 program: functionDefnMain functionDefnList

    2 functionDefnList: /* empty */
    3                 | functionDefnList functionDefn

    4 functionDefnMain: MAIN LPAREN argList RPAREN LBRACE statementList RBRACE

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    6 statementList: /* empty */
    7              | statementList statement

    8 statement: statementAssign
    9          | statementIf
   10          | statementWhile
   11          | VAR LPAREN argList RPAREN SEMI
   12          | arrayDefine

   13 statementWhile: WHILE LPAREN expr RPAREN LBRACE statementList RBRACE

   14 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE
   15            | IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

   16 statementAssign: VAR EQUAL expr SEMI
   17                | VAR LBRACKET expr RBRACKET EQUAL expr SEMI

   18 expr: LPAREN expr RPAREN
   19     | expr PLUS expr
   20     | expr MINUS expr
   21     | expr MULT expr
   22     | expr DIV expr
   23     | expr XOR expr
   24     | expr AND expr
   25     | expr OR expr
   26     | expr BITWISEAND expr
   27     | expr BITWISEOR expr
   28     | expr TEST_FOR_EQUAL expr
   29     | expr NEQ expr
   30     | expr GEQ expr
   31     | expr LEQ expr
   32     | expr GTR expr
   33     | expr LSS expr
   34     | VAR
   35     | CONST
   36     | VAR LPAREN argList RPAREN
   37     | VAR LBRACKET expr RBRACKET

   38 argList: /* empty */
   39        | expr commaArgList

   40 commaArgList: /* empty */
   41             | commaArgList COMMA expr

   42 defnArgList: /* empty */
   43            | VAR defnCommaArgList
   44            | BITWISEAND VAR defnCommaArgList

   45 defnCommaArgList: /* empty */
   46                 | defnCommaArgList COMMA VAR
   47                 | defnCommaArgList COMMA BITWISEAND VAR

   48 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST RBRACKET SEMI


Terminals, with rules where they appear

$end (0) 0
error (256)
INPUTS (258)
OUTPUTS (259)
COMMA (260) 41 46 47
BANG (261)
EQUAL (262) 16 17
LBRACE (263) 4 5 13 14 15
RBRACE (264) 4 5 13 14 15
ARRAYDEFINE (265) 48
IF (266) 14 15
ELSE (267) 15
WHILE (268) 13
VAR (269) 5 11 16 17 34 36 37 43 44 46 47 48
VAR_METHOD (270)
CONST (271) 35 48
CONST_FLOAT (272)
MAIN (273) 4
BITWISEOR (274) 27
BITWISEAND (275) 26 44 47
OR (276) 25
AND (277) 24
LSS (278) 33
GTR (279) 32
NEQ (280) 29
LEQ (281) 31
GEQ (282) 30
TEST_FOR_EQUAL (283) 28
LPAREN (284) 4 5 11 13 14 15 18 36
MINUS (285) 20
PLUS (286) 19
XOR (287) 23
DIV (288) 22
MULT (289) 21
LBRACKET (290) 17 37 48
RBRACKET (291) 17 37 48
RPAREN (292) 4 5 11 13 14 15 18 36
SEMI (293) 11 16 17 48


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
program (40)
    on left: 1, on right: 0
functionDefnList (41)
    on left: 2 3, on right: 1 3
functionDefnMain (42)
    on left: 4, on right: 1
functionDefn (43)
    on left: 5, on right: 3
statementList (44)
    on left: 6 7, on right: 4 5 7 13 14 15
statement (45)
    on left: 8 9 10 11 12, on right: 7
statementWhile (46)
    on left: 13, on right: 10
statementIf (47)
    on left: 14 15, on right: 9
statementAssign (48)
    on left: 16 17, on right: 8
expr (49)
    on left: 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
    36 37, on right: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    29 30 31 32 33 37 39 41
argList (50)
    on left: 38 39, on right: 4 11 36
commaArgList (51)
    on left: 40 41, on right: 39 41
defnArgList (52)
    on left: 42 43 44, on right: 5
defnCommaArgList (53)
    on left: 45 46 47, on right: 43 44 46 47
arrayDefine (54)
    on left: 48, on right: 12


state 0

    0 $accept: . program $end

    MAIN  shift, and go to state 1

    program           go to state 2
    functionDefnMain  go to state 3


state 1

    4 functionDefnMain: MAIN . LPAREN argList RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: functionDefnMain . functionDefnList

    $default  reduce using rule 2 (functionDefnList)

    functionDefnList  go to state 6


state 4

    4 functionDefnMain: MAIN LPAREN . argList RPAREN LBRACE statementList RBRACE

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    $default  reduce using rule 38 (argList)

    expr     go to state 10
    argList  go to state 11


state 5

    0 $accept: program $end .

    $default  accept


state 6

    1 program: functionDefnMain functionDefnList .
    3 functionDefnList: functionDefnList . functionDefn

    VAR  shift, and go to state 12

    $default  reduce using rule 1 (program)

    functionDefn  go to state 13


state 7

   34 expr: VAR .
   36     | VAR . LPAREN argList RPAREN
   37     | VAR . LBRACKET expr RBRACKET

    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    $default  reduce using rule 34 (expr)


state 8

   35 expr: CONST .

    $default  reduce using rule 35 (expr)


state 9

   18 expr: LPAREN . expr RPAREN

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 16


state 10

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr
   39 argList: expr . commaArgList

    BITWISEOR       shift, and go to state 17
    BITWISEAND      shift, and go to state 18
    OR              shift, and go to state 19
    AND             shift, and go to state 20
    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31

    $default  reduce using rule 40 (commaArgList)

    commaArgList  go to state 32


state 11

    4 functionDefnMain: MAIN LPAREN argList . RPAREN LBRACE statementList RBRACE

    RPAREN  shift, and go to state 33


state 12

    5 functionDefn: VAR . LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 34


state 13

    3 functionDefnList: functionDefnList functionDefn .

    $default  reduce using rule 3 (functionDefnList)


state 14

   36 expr: VAR LPAREN . argList RPAREN

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    $default  reduce using rule 38 (argList)

    expr     go to state 10
    argList  go to state 35


state 15

   37 expr: VAR LBRACKET . expr RBRACKET

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 36


state 16

   18 expr: LPAREN expr . RPAREN
   19     | expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    BITWISEOR       shift, and go to state 17
    BITWISEAND      shift, and go to state 18
    OR              shift, and go to state 19
    AND             shift, and go to state 20
    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31
    RPAREN          shift, and go to state 37


state 17

   27 expr: expr BITWISEOR . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 38


state 18

   26 expr: expr BITWISEAND . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 39


state 19

   25 expr: expr OR . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 40


state 20

   24 expr: expr AND . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 41


state 21

   33 expr: expr LSS . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 42


state 22

   32 expr: expr GTR . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 43


state 23

   29 expr: expr NEQ . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 44


state 24

   31 expr: expr LEQ . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 45


state 25

   30 expr: expr GEQ . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 46


state 26

   28 expr: expr TEST_FOR_EQUAL . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 47


state 27

   20 expr: expr MINUS . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 48


state 28

   19 expr: expr PLUS . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 49


state 29

   23 expr: expr XOR . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 50


state 30

   22 expr: expr DIV . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 51


state 31

   21 expr: expr MULT . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 52


state 32

   39 argList: expr commaArgList .
   41 commaArgList: commaArgList . COMMA expr

    COMMA  shift, and go to state 53

    $default  reduce using rule 39 (argList)


state 33

    4 functionDefnMain: MAIN LPAREN argList RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 54


state 34

    5 functionDefn: VAR LPAREN . defnArgList RPAREN LBRACE statementList RBRACE

    VAR         shift, and go to state 55
    BITWISEAND  shift, and go to state 56

    $default  reduce using rule 42 (defnArgList)

    defnArgList  go to state 57


state 35

   36 expr: VAR LPAREN argList . RPAREN

    RPAREN  shift, and go to state 58


state 36

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr
   37     | VAR LBRACKET expr . RBRACKET

    BITWISEOR       shift, and go to state 17
    BITWISEAND      shift, and go to state 18
    OR              shift, and go to state 19
    AND             shift, and go to state 20
    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31
    RBRACKET        shift, and go to state 59


state 37

   18 expr: LPAREN expr RPAREN .

    $default  reduce using rule 18 (expr)


state 38

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   27     | expr BITWISEOR expr .
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31

    $default  reduce using rule 27 (expr)


state 39

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   26     | expr BITWISEAND expr .
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31

    $default  reduce using rule 26 (expr)


state 40

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   25     | expr OR expr .
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31

    $default  reduce using rule 25 (expr)


state 41

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   24     | expr AND expr .
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31

    $default  reduce using rule 24 (expr)


state 42

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr
   33     | expr LSS expr .

    MINUS  shift, and go to state 27
    PLUS   shift, and go to state 28
    XOR    shift, and go to state 29
    DIV    shift, and go to state 30
    MULT   shift, and go to state 31

    $default  reduce using rule 33 (expr)


state 43

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   32     | expr GTR expr .
   33     | expr . LSS expr

    MINUS  shift, and go to state 27
    PLUS   shift, and go to state 28
    XOR    shift, and go to state 29
    DIV    shift, and go to state 30
    MULT   shift, and go to state 31

    $default  reduce using rule 32 (expr)


state 44

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   29     | expr NEQ expr .
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    MINUS  shift, and go to state 27
    PLUS   shift, and go to state 28
    XOR    shift, and go to state 29
    DIV    shift, and go to state 30
    MULT   shift, and go to state 31

    $default  reduce using rule 29 (expr)


state 45

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   31     | expr LEQ expr .
   32     | expr . GTR expr
   33     | expr . LSS expr

    MINUS  shift, and go to state 27
    PLUS   shift, and go to state 28
    XOR    shift, and go to state 29
    DIV    shift, and go to state 30
    MULT   shift, and go to state 31

    $default  reduce using rule 31 (expr)


state 46

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   30     | expr GEQ expr .
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    MINUS  shift, and go to state 27
    PLUS   shift, and go to state 28
    XOR    shift, and go to state 29
    DIV    shift, and go to state 30
    MULT   shift, and go to state 31

    $default  reduce using rule 30 (expr)


state 47

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   28     | expr TEST_FOR_EQUAL expr .
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    MINUS  shift, and go to state 27
    PLUS   shift, and go to state 28
    XOR    shift, and go to state 29
    DIV    shift, and go to state 30
    MULT   shift, and go to state 31

    $default  reduce using rule 28 (expr)


state 48

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   20     | expr MINUS expr .
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    XOR   shift, and go to state 29
    DIV   shift, and go to state 30
    MULT  shift, and go to state 31

    $default  reduce using rule 20 (expr)


state 49

   19 expr: expr . PLUS expr
   19     | expr PLUS expr .
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    XOR   shift, and go to state 29
    DIV   shift, and go to state 30
    MULT  shift, and go to state 31

    $default  reduce using rule 19 (expr)


state 50

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   23     | expr XOR expr .
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    DIV   shift, and go to state 30
    MULT  shift, and go to state 31

    $default  reduce using rule 23 (expr)


state 51

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   22     | expr DIV expr .
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    $default  reduce using rule 22 (expr)


state 52

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   21     | expr MULT expr .
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    $default  reduce using rule 21 (expr)


state 53

   41 commaArgList: commaArgList COMMA . expr

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 60


state 54

    4 functionDefnMain: MAIN LPAREN argList RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 6 (statementList)

    statementList  go to state 61


state 55

   43 defnArgList: VAR . defnCommaArgList

    $default  reduce using rule 45 (defnCommaArgList)

    defnCommaArgList  go to state 62


state 56

   44 defnArgList: BITWISEAND . VAR defnCommaArgList

    VAR  shift, and go to state 63


state 57

    5 functionDefn: VAR LPAREN defnArgList . RPAREN LBRACE statementList RBRACE

    RPAREN  shift, and go to state 64


state 58

   36 expr: VAR LPAREN argList RPAREN .

    $default  reduce using rule 36 (expr)


state 59

   37 expr: VAR LBRACKET expr RBRACKET .

    $default  reduce using rule 37 (expr)


state 60

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr
   41 commaArgList: commaArgList COMMA expr .

    BITWISEOR       shift, and go to state 17
    BITWISEAND      shift, and go to state 18
    OR              shift, and go to state 19
    AND             shift, and go to state 20
    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31

    $default  reduce using rule 41 (commaArgList)


state 61

    4 functionDefnMain: MAIN LPAREN argList RPAREN LBRACE statementList . RBRACE
    7 statementList: statementList . statement

    RBRACE       shift, and go to state 65
    ARRAYDEFINE  shift, and go to state 66
    IF           shift, and go to state 67
    WHILE        shift, and go to state 68
    VAR          shift, and go to state 69

    statement        go to state 70
    statementWhile   go to state 71
    statementIf      go to state 72
    statementAssign  go to state 73
    arrayDefine      go to state 74


state 62

   43 defnArgList: VAR defnCommaArgList .
   46 defnCommaArgList: defnCommaArgList . COMMA VAR
   47                 | defnCommaArgList . COMMA BITWISEAND VAR

    COMMA  shift, and go to state 75

    $default  reduce using rule 43 (defnArgList)


state 63

   44 defnArgList: BITWISEAND VAR . defnCommaArgList

    $default  reduce using rule 45 (defnCommaArgList)

    defnCommaArgList  go to state 76


state 64

    5 functionDefn: VAR LPAREN defnArgList RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 77


state 65

    4 functionDefnMain: MAIN LPAREN argList RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 4 (functionDefnMain)


state 66

   48 arrayDefine: ARRAYDEFINE . VAR LBRACKET CONST RBRACKET SEMI

    VAR  shift, and go to state 78


state 67

   14 statementIf: IF . LPAREN expr RPAREN LBRACE statementList RBRACE
   15            | IF . LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

    LPAREN  shift, and go to state 79


state 68

   13 statementWhile: WHILE . LPAREN expr RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 80


state 69

   11 statement: VAR . LPAREN argList RPAREN SEMI
   16 statementAssign: VAR . EQUAL expr SEMI
   17                | VAR . LBRACKET expr RBRACKET EQUAL expr SEMI

    EQUAL     shift, and go to state 81
    LPAREN    shift, and go to state 82
    LBRACKET  shift, and go to state 83


state 70

    7 statementList: statementList statement .

    $default  reduce using rule 7 (statementList)


state 71

   10 statement: statementWhile .

    $default  reduce using rule 10 (statement)


state 72

    9 statement: statementIf .

    $default  reduce using rule 9 (statement)


state 73

    8 statement: statementAssign .

    $default  reduce using rule 8 (statement)


state 74

   12 statement: arrayDefine .

    $default  reduce using rule 12 (statement)


state 75

   46 defnCommaArgList: defnCommaArgList COMMA . VAR
   47                 | defnCommaArgList COMMA . BITWISEAND VAR

    VAR         shift, and go to state 84
    BITWISEAND  shift, and go to state 85


state 76

   44 defnArgList: BITWISEAND VAR defnCommaArgList .
   46 defnCommaArgList: defnCommaArgList . COMMA VAR
   47                 | defnCommaArgList . COMMA BITWISEAND VAR

    COMMA  shift, and go to state 75

    $default  reduce using rule 44 (defnArgList)


state 77

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 6 (statementList)

    statementList  go to state 86


state 78

   48 arrayDefine: ARRAYDEFINE VAR . LBRACKET CONST RBRACKET SEMI

    LBRACKET  shift, and go to state 87


state 79

   14 statementIf: IF LPAREN . expr RPAREN LBRACE statementList RBRACE
   15            | IF LPAREN . expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 88


state 80

   13 statementWhile: WHILE LPAREN . expr RPAREN LBRACE statementList RBRACE

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 89


state 81

   16 statementAssign: VAR EQUAL . expr SEMI

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 90


state 82

   11 statement: VAR LPAREN . argList RPAREN SEMI

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    $default  reduce using rule 38 (argList)

    expr     go to state 10
    argList  go to state 91


state 83

   17 statementAssign: VAR LBRACKET . expr RBRACKET EQUAL expr SEMI

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 92


state 84

   46 defnCommaArgList: defnCommaArgList COMMA VAR .

    $default  reduce using rule 46 (defnCommaArgList)


state 85

   47 defnCommaArgList: defnCommaArgList COMMA BITWISEAND . VAR

    VAR  shift, and go to state 93


state 86

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE statementList . RBRACE
    7 statementList: statementList . statement

    RBRACE       shift, and go to state 94
    ARRAYDEFINE  shift, and go to state 66
    IF           shift, and go to state 67
    WHILE        shift, and go to state 68
    VAR          shift, and go to state 69

    statement        go to state 70
    statementWhile   go to state 71
    statementIf      go to state 72
    statementAssign  go to state 73
    arrayDefine      go to state 74


state 87

   48 arrayDefine: ARRAYDEFINE VAR LBRACKET . CONST RBRACKET SEMI

    CONST  shift, and go to state 95


state 88

   14 statementIf: IF LPAREN expr . RPAREN LBRACE statementList RBRACE
   15            | IF LPAREN expr . RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE
   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    BITWISEOR       shift, and go to state 17
    BITWISEAND      shift, and go to state 18
    OR              shift, and go to state 19
    AND             shift, and go to state 20
    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31
    RPAREN          shift, and go to state 96


state 89

   13 statementWhile: WHILE LPAREN expr . RPAREN LBRACE statementList RBRACE
   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    BITWISEOR       shift, and go to state 17
    BITWISEAND      shift, and go to state 18
    OR              shift, and go to state 19
    AND             shift, and go to state 20
    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31
    RPAREN          shift, and go to state 97


state 90

   16 statementAssign: VAR EQUAL expr . SEMI
   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    BITWISEOR       shift, and go to state 17
    BITWISEAND      shift, and go to state 18
    OR              shift, and go to state 19
    AND             shift, and go to state 20
    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31
    SEMI            shift, and go to state 98


state 91

   11 statement: VAR LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 99


state 92

   17 statementAssign: VAR LBRACKET expr . RBRACKET EQUAL expr SEMI
   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    BITWISEOR       shift, and go to state 17
    BITWISEAND      shift, and go to state 18
    OR              shift, and go to state 19
    AND             shift, and go to state 20
    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31
    RBRACKET        shift, and go to state 100


state 93

   47 defnCommaArgList: defnCommaArgList COMMA BITWISEAND VAR .

    $default  reduce using rule 47 (defnCommaArgList)


state 94

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 5 (functionDefn)


state 95

   48 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST . RBRACKET SEMI

    RBRACKET  shift, and go to state 101


state 96

   14 statementIf: IF LPAREN expr RPAREN . LBRACE statementList RBRACE
   15            | IF LPAREN expr RPAREN . LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

    LBRACE  shift, and go to state 102


state 97

   13 statementWhile: WHILE LPAREN expr RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 103


state 98

   16 statementAssign: VAR EQUAL expr SEMI .

    $default  reduce using rule 16 (statementAssign)


state 99

   11 statement: VAR LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 104


state 100

   17 statementAssign: VAR LBRACKET expr RBRACKET . EQUAL expr SEMI

    EQUAL  shift, and go to state 105


state 101

   48 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST RBRACKET . SEMI

    SEMI  shift, and go to state 106


state 102

   14 statementIf: IF LPAREN expr RPAREN LBRACE . statementList RBRACE
   15            | IF LPAREN expr RPAREN LBRACE . statementList RBRACE ELSE LBRACE statementList RBRACE

    $default  reduce using rule 6 (statementList)

    statementList  go to state 107


state 103

   13 statementWhile: WHILE LPAREN expr RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 6 (statementList)

    statementList  go to state 108


state 104

   11 statement: VAR LPAREN argList RPAREN SEMI .

    $default  reduce using rule 11 (statement)


state 105

   17 statementAssign: VAR LBRACKET expr RBRACKET EQUAL . expr SEMI

    VAR     shift, and go to state 7
    CONST   shift, and go to state 8
    LPAREN  shift, and go to state 9

    expr  go to state 109


state 106

   48 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST RBRACKET SEMI .

    $default  reduce using rule 48 (arrayDefine)


state 107

    7 statementList: statementList . statement
   14 statementIf: IF LPAREN expr RPAREN LBRACE statementList . RBRACE
   15            | IF LPAREN expr RPAREN LBRACE statementList . RBRACE ELSE LBRACE statementList RBRACE

    RBRACE       shift, and go to state 110
    ARRAYDEFINE  shift, and go to state 66
    IF           shift, and go to state 67
    WHILE        shift, and go to state 68
    VAR          shift, and go to state 69

    statement        go to state 70
    statementWhile   go to state 71
    statementIf      go to state 72
    statementAssign  go to state 73
    arrayDefine      go to state 74


state 108

    7 statementList: statementList . statement
   13 statementWhile: WHILE LPAREN expr RPAREN LBRACE statementList . RBRACE

    RBRACE       shift, and go to state 111
    ARRAYDEFINE  shift, and go to state 66
    IF           shift, and go to state 67
    WHILE        shift, and go to state 68
    VAR          shift, and go to state 69

    statement        go to state 70
    statementWhile   go to state 71
    statementIf      go to state 72
    statementAssign  go to state 73
    arrayDefine      go to state 74


state 109

   17 statementAssign: VAR LBRACKET expr RBRACKET EQUAL expr . SEMI
   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MULT expr
   22     | expr . DIV expr
   23     | expr . XOR expr
   24     | expr . AND expr
   25     | expr . OR expr
   26     | expr . BITWISEAND expr
   27     | expr . BITWISEOR expr
   28     | expr . TEST_FOR_EQUAL expr
   29     | expr . NEQ expr
   30     | expr . GEQ expr
   31     | expr . LEQ expr
   32     | expr . GTR expr
   33     | expr . LSS expr

    BITWISEOR       shift, and go to state 17
    BITWISEAND      shift, and go to state 18
    OR              shift, and go to state 19
    AND             shift, and go to state 20
    LSS             shift, and go to state 21
    GTR             shift, and go to state 22
    NEQ             shift, and go to state 23
    LEQ             shift, and go to state 24
    GEQ             shift, and go to state 25
    TEST_FOR_EQUAL  shift, and go to state 26
    MINUS           shift, and go to state 27
    PLUS            shift, and go to state 28
    XOR             shift, and go to state 29
    DIV             shift, and go to state 30
    MULT            shift, and go to state 31
    SEMI            shift, and go to state 112


state 110

   14 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE .
   15            | IF LPAREN expr RPAREN LBRACE statementList RBRACE . ELSE LBRACE statementList RBRACE

    ELSE  shift, and go to state 113

    $default  reduce using rule 14 (statementIf)


state 111

   13 statementWhile: WHILE LPAREN expr RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 13 (statementWhile)


state 112

   17 statementAssign: VAR LBRACKET expr RBRACKET EQUAL expr SEMI .

    $default  reduce using rule 17 (statementAssign)


state 113

   15 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 114


state 114

   15 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE . statementList RBRACE

    $default  reduce using rule 6 (statementList)

    statementList  go to state 115


state 115

    7 statementList: statementList . statement
   15 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList . RBRACE

    RBRACE       shift, and go to state 116
    ARRAYDEFINE  shift, and go to state 66
    IF           shift, and go to state 67
    WHILE        shift, and go to state 68
    VAR          shift, and go to state 69

    statement        go to state 70
    statementWhile   go to state 71
    statementIf      go to state 72
    statementAssign  go to state 73
    arrayDefine      go to state 74


state 116

   15 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE .

    $default  reduce using rule 15 (statementIf)
