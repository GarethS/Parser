Terminals unused in grammar

   INPUTS
   OUTPUTS
   BANG
   VAR_METHOD
   CONST_FLOAT


Grammar

    0 $accept: program $end

    1 program: functionDefnMain functionDefnList

    2 functionDefnList: /* empty */
    3                 | functionDefnList functionDefn

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE statementList RBRACE
    6             | MOVEABSOLUTE LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    7 statementList: /* empty */
    8              | statementList statement

    9 statement: statementAssign
   10          | statementIf
   11          | statementWhile
   12          | VAR LPAREN argList RPAREN SEMI
   13          | MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   14          | MOVEABSOLUTE LPAREN argList RPAREN SEMI
   15          | MOVERELATIVE LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   16          | MOVERELATIVE LPAREN argList RPAREN SEMI
   17          | SLEEP LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   18          | SLEEP LPAREN argList RPAREN SEMI
   19          | arrayDefine

   20 statementWhile: WHILE LPAREN expr RPAREN LBRACE statementList RBRACE

   21 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE
   22            | IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

   23 statementAssign: VAR EQUAL expr SEMI
   24                | VAR LBRACKET expr RBRACKET EQUAL expr SEMI

   25 expr: LPAREN expr RPAREN
   26     | expr PLUS expr
   27     | expr MINUS expr
   28     | expr MULT expr
   29     | expr DIV expr
   30     | expr XOR expr
   31     | expr AND expr
   32     | expr OR expr
   33     | expr BITWISEAND expr
   34     | expr BITWISEOR expr
   35     | expr TEST_FOR_EQUAL expr
   36     | expr NEQ expr
   37     | expr GEQ expr
   38     | expr LEQ expr
   39     | expr GTR expr
   40     | expr LSS expr
   41     | VAR
   42     | CONST
   43     | VAR LPAREN argList RPAREN
   44     | VAR LBRACKET expr RBRACKET

   45 argList: /* empty */
   46        | expr commaArgList

   47 commaArgList: /* empty */
   48             | commaArgList COMMA expr

   49 defnArgList: /* empty */
   50            | VAR defnCommaArgList
   51            | BITWISEAND VAR defnCommaArgList

   52 defnCommaArgList: /* empty */
   53                 | defnCommaArgList COMMA VAR
   54                 | defnCommaArgList COMMA BITWISEAND VAR

   55 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST RBRACKET SEMI


Terminals, with rules where they appear

$end (0) 0
error (256)
INPUTS (258)
OUTPUTS (259)
COMMA (260) 13 15 17 48 53 54
BANG (261)
EQUAL (262) 23 24
LBRACE (263) 4 5 6 20 21 22
RBRACE (264) 4 5 6 20 21 22
ARRAYDEFINE (265) 55
IF (266) 21 22
ELSE (267) 22
WHILE (268) 20
VAR (269) 5 12 13 15 17 23 24 41 43 44 50 51 53 54 55
VAR_METHOD (270)
CONST (271) 42 55
CONST_FLOAT (272)
MAIN (273) 4
MOVEABSOLUTE (274) 6 13 14
MOVERELATIVE (275) 15 16
SLEEP (276) 17 18
BITWISEOR (277) 34
BITWISEAND (278) 13 15 17 33 51 54
OR (279) 32
AND (280) 31
LSS (281) 40
GTR (282) 39
NEQ (283) 36
LEQ (284) 38
GEQ (285) 37
TEST_FOR_EQUAL (286) 35
LPAREN (287) 4 5 6 12 13 14 15 16 17 18 20 21 22 25 43
MINUS (288) 27
PLUS (289) 26
XOR (290) 30
DIV (291) 29
MULT (292) 28
LBRACKET (293) 24 44 55
RBRACKET (294) 24 44 55
RPAREN (295) 4 5 6 12 13 14 15 16 17 18 20 21 22 25 43
SEMI (296) 12 13 14 15 16 17 18 23 24 55


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
program (43)
    on left: 1, on right: 0
functionDefnList (44)
    on left: 2 3, on right: 1 3
functionDefnMain (45)
    on left: 4, on right: 1
functionDefn (46)
    on left: 5 6, on right: 3
statementList (47)
    on left: 7 8, on right: 4 5 6 8 20 21 22
statement (48)
    on left: 9 10 11 12 13 14 15 16 17 18 19, on right: 8
statementWhile (49)
    on left: 20, on right: 11
statementIf (50)
    on left: 21 22, on right: 10
statementAssign (51)
    on left: 23 24, on right: 9
expr (52)
    on left: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
    43 44, on right: 13 15 17 20 21 22 23 24 25 26 27 28 29 30 31 32
    33 34 35 36 37 38 39 40 44 46 48
argList (53)
    on left: 45 46, on right: 12 14 16 18 43
commaArgList (54)
    on left: 47 48, on right: 46 48
defnArgList (55)
    on left: 49 50 51, on right: 4 5 6
defnCommaArgList (56)
    on left: 52 53 54, on right: 50 51 53 54
arrayDefine (57)
    on left: 55, on right: 19


state 0

    0 $accept: . program $end

    MAIN  shift, and go to state 1

    program           go to state 2
    functionDefnMain  go to state 3


state 1

    4 functionDefnMain: MAIN . LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: functionDefnMain . functionDefnList

    $default  reduce using rule 2 (functionDefnList)

    functionDefnList  go to state 6


state 4

    4 functionDefnMain: MAIN LPAREN . defnArgList RPAREN LBRACE statementList RBRACE

    VAR         shift, and go to state 7
    BITWISEAND  shift, and go to state 8

    $default  reduce using rule 49 (defnArgList)

    defnArgList  go to state 9


state 5

    0 $accept: program $end .

    $default  accept


state 6

    1 program: functionDefnMain functionDefnList .
    3 functionDefnList: functionDefnList . functionDefn

    VAR           shift, and go to state 10
    MOVEABSOLUTE  shift, and go to state 11

    $default  reduce using rule 1 (program)

    functionDefn  go to state 12


state 7

   50 defnArgList: VAR . defnCommaArgList

    $default  reduce using rule 52 (defnCommaArgList)

    defnCommaArgList  go to state 13


state 8

   51 defnArgList: BITWISEAND . VAR defnCommaArgList

    VAR  shift, and go to state 14


state 9

    4 functionDefnMain: MAIN LPAREN defnArgList . RPAREN LBRACE statementList RBRACE

    RPAREN  shift, and go to state 15


state 10

    5 functionDefn: VAR . LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 16


state 11

    6 functionDefn: MOVEABSOLUTE . LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 17


state 12

    3 functionDefnList: functionDefnList functionDefn .

    $default  reduce using rule 3 (functionDefnList)


state 13

   50 defnArgList: VAR defnCommaArgList .
   53 defnCommaArgList: defnCommaArgList . COMMA VAR
   54                 | defnCommaArgList . COMMA BITWISEAND VAR

    COMMA  shift, and go to state 18

    $default  reduce using rule 50 (defnArgList)


state 14

   51 defnArgList: BITWISEAND VAR . defnCommaArgList

    $default  reduce using rule 52 (defnCommaArgList)

    defnCommaArgList  go to state 19


state 15

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 20


state 16

    5 functionDefn: VAR LPAREN . defnArgList RPAREN LBRACE statementList RBRACE

    VAR         shift, and go to state 7
    BITWISEAND  shift, and go to state 8

    $default  reduce using rule 49 (defnArgList)

    defnArgList  go to state 21


state 17

    6 functionDefn: MOVEABSOLUTE LPAREN . defnArgList RPAREN LBRACE statementList RBRACE

    VAR         shift, and go to state 7
    BITWISEAND  shift, and go to state 8

    $default  reduce using rule 49 (defnArgList)

    defnArgList  go to state 22


state 18

   53 defnCommaArgList: defnCommaArgList COMMA . VAR
   54                 | defnCommaArgList COMMA . BITWISEAND VAR

    VAR         shift, and go to state 23
    BITWISEAND  shift, and go to state 24


state 19

   51 defnArgList: BITWISEAND VAR defnCommaArgList .
   53 defnCommaArgList: defnCommaArgList . COMMA VAR
   54                 | defnCommaArgList . COMMA BITWISEAND VAR

    COMMA  shift, and go to state 18

    $default  reduce using rule 51 (defnArgList)


state 20

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 25


state 21

    5 functionDefn: VAR LPAREN defnArgList . RPAREN LBRACE statementList RBRACE

    RPAREN  shift, and go to state 26


state 22

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList . RPAREN LBRACE statementList RBRACE

    RPAREN  shift, and go to state 27


state 23

   53 defnCommaArgList: defnCommaArgList COMMA VAR .

    $default  reduce using rule 53 (defnCommaArgList)


state 24

   54 defnCommaArgList: defnCommaArgList COMMA BITWISEAND . VAR

    VAR  shift, and go to state 28


state 25

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN LBRACE statementList . RBRACE
    8 statementList: statementList . statement

    RBRACE        shift, and go to state 29
    ARRAYDEFINE   shift, and go to state 30
    IF            shift, and go to state 31
    WHILE         shift, and go to state 32
    VAR           shift, and go to state 33
    MOVEABSOLUTE  shift, and go to state 34
    MOVERELATIVE  shift, and go to state 35
    SLEEP         shift, and go to state 36

    statement        go to state 37
    statementWhile   go to state 38
    statementIf      go to state 39
    statementAssign  go to state 40
    arrayDefine      go to state 41


state 26

    5 functionDefn: VAR LPAREN defnArgList RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 42


state 27

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 43


state 28

   54 defnCommaArgList: defnCommaArgList COMMA BITWISEAND VAR .

    $default  reduce using rule 54 (defnCommaArgList)


state 29

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 4 (functionDefnMain)


state 30

   55 arrayDefine: ARRAYDEFINE . VAR LBRACKET CONST RBRACKET SEMI

    VAR  shift, and go to state 44


state 31

   21 statementIf: IF . LPAREN expr RPAREN LBRACE statementList RBRACE
   22            | IF . LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

    LPAREN  shift, and go to state 45


state 32

   20 statementWhile: WHILE . LPAREN expr RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 46


state 33

   12 statement: VAR . LPAREN argList RPAREN SEMI
   23 statementAssign: VAR . EQUAL expr SEMI
   24                | VAR . LBRACKET expr RBRACKET EQUAL expr SEMI

    EQUAL     shift, and go to state 47
    LPAREN    shift, and go to state 48
    LBRACKET  shift, and go to state 49


state 34

   13 statement: MOVEABSOLUTE . LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   14          | MOVEABSOLUTE . LPAREN argList RPAREN SEMI

    LPAREN  shift, and go to state 50


state 35

   15 statement: MOVERELATIVE . LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   16          | MOVERELATIVE . LPAREN argList RPAREN SEMI

    LPAREN  shift, and go to state 51


state 36

   17 statement: SLEEP . LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   18          | SLEEP . LPAREN argList RPAREN SEMI

    LPAREN  shift, and go to state 52


state 37

    8 statementList: statementList statement .

    $default  reduce using rule 8 (statementList)


state 38

   11 statement: statementWhile .

    $default  reduce using rule 11 (statement)


state 39

   10 statement: statementIf .

    $default  reduce using rule 10 (statement)


state 40

    9 statement: statementAssign .

    $default  reduce using rule 9 (statement)


state 41

   19 statement: arrayDefine .

    $default  reduce using rule 19 (statement)


state 42

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 53


state 43

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 54


state 44

   55 arrayDefine: ARRAYDEFINE VAR . LBRACKET CONST RBRACKET SEMI

    LBRACKET  shift, and go to state 55


state 45

   21 statementIf: IF LPAREN . expr RPAREN LBRACE statementList RBRACE
   22            | IF LPAREN . expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 59


state 46

   20 statementWhile: WHILE LPAREN . expr RPAREN LBRACE statementList RBRACE

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 60


state 47

   23 statementAssign: VAR EQUAL . expr SEMI

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 61


state 48

   12 statement: VAR LPAREN . argList RPAREN SEMI

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    $default  reduce using rule 45 (argList)

    expr     go to state 62
    argList  go to state 63


state 49

   24 statementAssign: VAR LBRACKET . expr RBRACKET EQUAL expr SEMI

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 64


state 50

   13 statement: MOVEABSOLUTE LPAREN . BITWISEAND VAR COMMA expr RPAREN SEMI
   14          | MOVEABSOLUTE LPAREN . argList RPAREN SEMI

    VAR         shift, and go to state 56
    CONST       shift, and go to state 57
    BITWISEAND  shift, and go to state 65
    LPAREN      shift, and go to state 58

    $default  reduce using rule 45 (argList)

    expr     go to state 62
    argList  go to state 66


state 51

   15 statement: MOVERELATIVE LPAREN . BITWISEAND VAR COMMA expr RPAREN SEMI
   16          | MOVERELATIVE LPAREN . argList RPAREN SEMI

    VAR         shift, and go to state 56
    CONST       shift, and go to state 57
    BITWISEAND  shift, and go to state 67
    LPAREN      shift, and go to state 58

    $default  reduce using rule 45 (argList)

    expr     go to state 62
    argList  go to state 68


state 52

   17 statement: SLEEP LPAREN . BITWISEAND VAR COMMA expr RPAREN SEMI
   18          | SLEEP LPAREN . argList RPAREN SEMI

    VAR         shift, and go to state 56
    CONST       shift, and go to state 57
    BITWISEAND  shift, and go to state 69
    LPAREN      shift, and go to state 58

    $default  reduce using rule 45 (argList)

    expr     go to state 62
    argList  go to state 70


state 53

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE statementList . RBRACE
    8 statementList: statementList . statement

    RBRACE        shift, and go to state 71
    ARRAYDEFINE   shift, and go to state 30
    IF            shift, and go to state 31
    WHILE         shift, and go to state 32
    VAR           shift, and go to state 33
    MOVEABSOLUTE  shift, and go to state 34
    MOVERELATIVE  shift, and go to state 35
    SLEEP         shift, and go to state 36

    statement        go to state 37
    statementWhile   go to state 38
    statementIf      go to state 39
    statementAssign  go to state 40
    arrayDefine      go to state 41


state 54

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList RPAREN LBRACE statementList . RBRACE
    8 statementList: statementList . statement

    RBRACE        shift, and go to state 72
    ARRAYDEFINE   shift, and go to state 30
    IF            shift, and go to state 31
    WHILE         shift, and go to state 32
    VAR           shift, and go to state 33
    MOVEABSOLUTE  shift, and go to state 34
    MOVERELATIVE  shift, and go to state 35
    SLEEP         shift, and go to state 36

    statement        go to state 37
    statementWhile   go to state 38
    statementIf      go to state 39
    statementAssign  go to state 40
    arrayDefine      go to state 41


state 55

   55 arrayDefine: ARRAYDEFINE VAR LBRACKET . CONST RBRACKET SEMI

    CONST  shift, and go to state 73


state 56

   41 expr: VAR .
   43     | VAR . LPAREN argList RPAREN
   44     | VAR . LBRACKET expr RBRACKET

    LPAREN    shift, and go to state 74
    LBRACKET  shift, and go to state 75

    $default  reduce using rule 41 (expr)


state 57

   42 expr: CONST .

    $default  reduce using rule 42 (expr)


state 58

   25 expr: LPAREN . expr RPAREN

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 76


state 59

   21 statementIf: IF LPAREN expr . RPAREN LBRACE statementList RBRACE
   22            | IF LPAREN expr . RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    RPAREN          shift, and go to state 92


state 60

   20 statementWhile: WHILE LPAREN expr . RPAREN LBRACE statementList RBRACE
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    RPAREN          shift, and go to state 93


state 61

   23 statementAssign: VAR EQUAL expr . SEMI
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    SEMI            shift, and go to state 94


state 62

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr
   46 argList: expr . commaArgList

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91

    $default  reduce using rule 47 (commaArgList)

    commaArgList  go to state 95


state 63

   12 statement: VAR LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 96


state 64

   24 statementAssign: VAR LBRACKET expr . RBRACKET EQUAL expr SEMI
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    RBRACKET        shift, and go to state 97


state 65

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND . VAR COMMA expr RPAREN SEMI

    VAR  shift, and go to state 98


state 66

   14 statement: MOVEABSOLUTE LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 99


state 67

   15 statement: MOVERELATIVE LPAREN BITWISEAND . VAR COMMA expr RPAREN SEMI

    VAR  shift, and go to state 100


state 68

   16 statement: MOVERELATIVE LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 101


state 69

   17 statement: SLEEP LPAREN BITWISEAND . VAR COMMA expr RPAREN SEMI

    VAR  shift, and go to state 102


state 70

   18 statement: SLEEP LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 103


state 71

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 5 (functionDefn)


state 72

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 6 (functionDefn)


state 73

   55 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST . RBRACKET SEMI

    RBRACKET  shift, and go to state 104


state 74

   43 expr: VAR LPAREN . argList RPAREN

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    $default  reduce using rule 45 (argList)

    expr     go to state 62
    argList  go to state 105


state 75

   44 expr: VAR LBRACKET . expr RBRACKET

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 106


state 76

   25 expr: LPAREN expr . RPAREN
   26     | expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    RPAREN          shift, and go to state 107


state 77

   34 expr: expr BITWISEOR . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 108


state 78

   33 expr: expr BITWISEAND . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 109


state 79

   32 expr: expr OR . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 110


state 80

   31 expr: expr AND . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 111


state 81

   40 expr: expr LSS . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 112


state 82

   39 expr: expr GTR . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 113


state 83

   36 expr: expr NEQ . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 114


state 84

   38 expr: expr LEQ . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 115


state 85

   37 expr: expr GEQ . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 116


state 86

   35 expr: expr TEST_FOR_EQUAL . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 117


state 87

   27 expr: expr MINUS . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 118


state 88

   26 expr: expr PLUS . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 119


state 89

   30 expr: expr XOR . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 120


state 90

   29 expr: expr DIV . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 121


state 91

   28 expr: expr MULT . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 122


state 92

   21 statementIf: IF LPAREN expr RPAREN . LBRACE statementList RBRACE
   22            | IF LPAREN expr RPAREN . LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

    LBRACE  shift, and go to state 123


state 93

   20 statementWhile: WHILE LPAREN expr RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 124


state 94

   23 statementAssign: VAR EQUAL expr SEMI .

    $default  reduce using rule 23 (statementAssign)


state 95

   46 argList: expr commaArgList .
   48 commaArgList: commaArgList . COMMA expr

    COMMA  shift, and go to state 125

    $default  reduce using rule 46 (argList)


state 96

   12 statement: VAR LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 126


state 97

   24 statementAssign: VAR LBRACKET expr RBRACKET . EQUAL expr SEMI

    EQUAL  shift, and go to state 127


state 98

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR . COMMA expr RPAREN SEMI

    COMMA  shift, and go to state 128


state 99

   14 statement: MOVEABSOLUTE LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 129


state 100

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR . COMMA expr RPAREN SEMI

    COMMA  shift, and go to state 130


state 101

   16 statement: MOVERELATIVE LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 131


state 102

   17 statement: SLEEP LPAREN BITWISEAND VAR . COMMA expr RPAREN SEMI

    COMMA  shift, and go to state 132


state 103

   18 statement: SLEEP LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 133


state 104

   55 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST RBRACKET . SEMI

    SEMI  shift, and go to state 134


state 105

   43 expr: VAR LPAREN argList . RPAREN

    RPAREN  shift, and go to state 135


state 106

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr
   44     | VAR LBRACKET expr . RBRACKET

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    RBRACKET        shift, and go to state 136


state 107

   25 expr: LPAREN expr RPAREN .

    $default  reduce using rule 25 (expr)


state 108

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   34     | expr BITWISEOR expr .
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91

    $default  reduce using rule 34 (expr)


state 109

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   33     | expr BITWISEAND expr .
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91

    $default  reduce using rule 33 (expr)


state 110

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   32     | expr OR expr .
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91

    $default  reduce using rule 32 (expr)


state 111

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   31     | expr AND expr .
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91

    $default  reduce using rule 31 (expr)


state 112

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr
   40     | expr LSS expr .

    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    XOR    shift, and go to state 89
    DIV    shift, and go to state 90
    MULT   shift, and go to state 91

    $default  reduce using rule 40 (expr)


state 113

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   39     | expr GTR expr .
   40     | expr . LSS expr

    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    XOR    shift, and go to state 89
    DIV    shift, and go to state 90
    MULT   shift, and go to state 91

    $default  reduce using rule 39 (expr)


state 114

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   36     | expr NEQ expr .
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    XOR    shift, and go to state 89
    DIV    shift, and go to state 90
    MULT   shift, and go to state 91

    $default  reduce using rule 36 (expr)


state 115

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   38     | expr LEQ expr .
   39     | expr . GTR expr
   40     | expr . LSS expr

    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    XOR    shift, and go to state 89
    DIV    shift, and go to state 90
    MULT   shift, and go to state 91

    $default  reduce using rule 38 (expr)


state 116

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   37     | expr GEQ expr .
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    XOR    shift, and go to state 89
    DIV    shift, and go to state 90
    MULT   shift, and go to state 91

    $default  reduce using rule 37 (expr)


state 117

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   35     | expr TEST_FOR_EQUAL expr .
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    XOR    shift, and go to state 89
    DIV    shift, and go to state 90
    MULT   shift, and go to state 91

    $default  reduce using rule 35 (expr)


state 118

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   27     | expr MINUS expr .
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    XOR   shift, and go to state 89
    DIV   shift, and go to state 90
    MULT  shift, and go to state 91

    $default  reduce using rule 27 (expr)


state 119

   26 expr: expr . PLUS expr
   26     | expr PLUS expr .
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    XOR   shift, and go to state 89
    DIV   shift, and go to state 90
    MULT  shift, and go to state 91

    $default  reduce using rule 26 (expr)


state 120

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   30     | expr XOR expr .
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    DIV   shift, and go to state 90
    MULT  shift, and go to state 91

    $default  reduce using rule 30 (expr)


state 121

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   29     | expr DIV expr .
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    $default  reduce using rule 29 (expr)


state 122

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   28     | expr MULT expr .
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    $default  reduce using rule 28 (expr)


state 123

   21 statementIf: IF LPAREN expr RPAREN LBRACE . statementList RBRACE
   22            | IF LPAREN expr RPAREN LBRACE . statementList RBRACE ELSE LBRACE statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 137


state 124

   20 statementWhile: WHILE LPAREN expr RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 138


state 125

   48 commaArgList: commaArgList COMMA . expr

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 139


state 126

   12 statement: VAR LPAREN argList RPAREN SEMI .

    $default  reduce using rule 12 (statement)


state 127

   24 statementAssign: VAR LBRACKET expr RBRACKET EQUAL . expr SEMI

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 140


state 128

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA . expr RPAREN SEMI

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 141


state 129

   14 statement: MOVEABSOLUTE LPAREN argList RPAREN SEMI .

    $default  reduce using rule 14 (statement)


state 130

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR COMMA . expr RPAREN SEMI

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 142


state 131

   16 statement: MOVERELATIVE LPAREN argList RPAREN SEMI .

    $default  reduce using rule 16 (statement)


state 132

   17 statement: SLEEP LPAREN BITWISEAND VAR COMMA . expr RPAREN SEMI

    VAR     shift, and go to state 56
    CONST   shift, and go to state 57
    LPAREN  shift, and go to state 58

    expr  go to state 143


state 133

   18 statement: SLEEP LPAREN argList RPAREN SEMI .

    $default  reduce using rule 18 (statement)


state 134

   55 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST RBRACKET SEMI .

    $default  reduce using rule 55 (arrayDefine)


state 135

   43 expr: VAR LPAREN argList RPAREN .

    $default  reduce using rule 43 (expr)


state 136

   44 expr: VAR LBRACKET expr RBRACKET .

    $default  reduce using rule 44 (expr)


state 137

    8 statementList: statementList . statement
   21 statementIf: IF LPAREN expr RPAREN LBRACE statementList . RBRACE
   22            | IF LPAREN expr RPAREN LBRACE statementList . RBRACE ELSE LBRACE statementList RBRACE

    RBRACE        shift, and go to state 144
    ARRAYDEFINE   shift, and go to state 30
    IF            shift, and go to state 31
    WHILE         shift, and go to state 32
    VAR           shift, and go to state 33
    MOVEABSOLUTE  shift, and go to state 34
    MOVERELATIVE  shift, and go to state 35
    SLEEP         shift, and go to state 36

    statement        go to state 37
    statementWhile   go to state 38
    statementIf      go to state 39
    statementAssign  go to state 40
    arrayDefine      go to state 41


state 138

    8 statementList: statementList . statement
   20 statementWhile: WHILE LPAREN expr RPAREN LBRACE statementList . RBRACE

    RBRACE        shift, and go to state 145
    ARRAYDEFINE   shift, and go to state 30
    IF            shift, and go to state 31
    WHILE         shift, and go to state 32
    VAR           shift, and go to state 33
    MOVEABSOLUTE  shift, and go to state 34
    MOVERELATIVE  shift, and go to state 35
    SLEEP         shift, and go to state 36

    statement        go to state 37
    statementWhile   go to state 38
    statementIf      go to state 39
    statementAssign  go to state 40
    arrayDefine      go to state 41


state 139

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr
   48 commaArgList: commaArgList COMMA expr .

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91

    $default  reduce using rule 48 (commaArgList)


state 140

   24 statementAssign: VAR LBRACKET expr RBRACKET EQUAL expr . SEMI
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    SEMI            shift, and go to state 146


state 141

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA expr . RPAREN SEMI
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    RPAREN          shift, and go to state 147


state 142

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR COMMA expr . RPAREN SEMI
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    RPAREN          shift, and go to state 148


state 143

   17 statement: SLEEP LPAREN BITWISEAND VAR COMMA expr . RPAREN SEMI
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . MULT expr
   29     | expr . DIV expr
   30     | expr . XOR expr
   31     | expr . AND expr
   32     | expr . OR expr
   33     | expr . BITWISEAND expr
   34     | expr . BITWISEOR expr
   35     | expr . TEST_FOR_EQUAL expr
   36     | expr . NEQ expr
   37     | expr . GEQ expr
   38     | expr . LEQ expr
   39     | expr . GTR expr
   40     | expr . LSS expr

    BITWISEOR       shift, and go to state 77
    BITWISEAND      shift, and go to state 78
    OR              shift, and go to state 79
    AND             shift, and go to state 80
    LSS             shift, and go to state 81
    GTR             shift, and go to state 82
    NEQ             shift, and go to state 83
    LEQ             shift, and go to state 84
    GEQ             shift, and go to state 85
    TEST_FOR_EQUAL  shift, and go to state 86
    MINUS           shift, and go to state 87
    PLUS            shift, and go to state 88
    XOR             shift, and go to state 89
    DIV             shift, and go to state 90
    MULT            shift, and go to state 91
    RPAREN          shift, and go to state 149


state 144

   21 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE .
   22            | IF LPAREN expr RPAREN LBRACE statementList RBRACE . ELSE LBRACE statementList RBRACE

    ELSE  shift, and go to state 150

    $default  reduce using rule 21 (statementIf)


state 145

   20 statementWhile: WHILE LPAREN expr RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 20 (statementWhile)


state 146

   24 statementAssign: VAR LBRACKET expr RBRACKET EQUAL expr SEMI .

    $default  reduce using rule 24 (statementAssign)


state 147

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA expr RPAREN . SEMI

    SEMI  shift, and go to state 151


state 148

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR COMMA expr RPAREN . SEMI

    SEMI  shift, and go to state 152


state 149

   17 statement: SLEEP LPAREN BITWISEAND VAR COMMA expr RPAREN . SEMI

    SEMI  shift, and go to state 153


state 150

   22 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 154


state 151

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI .

    $default  reduce using rule 13 (statement)


state 152

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI .

    $default  reduce using rule 15 (statement)


state 153

   17 statement: SLEEP LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI .

    $default  reduce using rule 17 (statement)


state 154

   22 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 155


state 155

    8 statementList: statementList . statement
   22 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList . RBRACE

    RBRACE        shift, and go to state 156
    ARRAYDEFINE   shift, and go to state 30
    IF            shift, and go to state 31
    WHILE         shift, and go to state 32
    VAR           shift, and go to state 33
    MOVEABSOLUTE  shift, and go to state 34
    MOVERELATIVE  shift, and go to state 35
    SLEEP         shift, and go to state 36

    statement        go to state 37
    statementWhile   go to state 38
    statementIf      go to state 39
    statementAssign  go to state 40
    arrayDefine      go to state 41


state 156

   22 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE .

    $default  reduce using rule 22 (statementIf)
