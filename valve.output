Terminals unused in grammar

   INPUTS
   OUTPUTS
   COMMA
   BANG
   NEQ


State 51 conflicts: 1 shift/reduce
State 53 conflicts: 5 shift/reduce
State 54 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: patternActionList

    2 patternActionList: /* empty */
    3                  | patternActionList patternAction

    4 patternAction: pattern LBRACE action RBRACE

    5 action: /* empty */
    6       | action statementAction

    7 statementAction: var EQUAL arithmeticExpression SEMI
    8                | arrayDefine
    9                | array EQUAL arithmeticExpression SEMI

   10 pattern: LPAREN pattern RPAREN
   11        | pattern AND pattern
   12        | pattern OR pattern
   13        | patternCompare

   14 patternCompare: var operandTest arithmeticExpression
   15               | identifier

   16 arithmeticExpression: LPAREN arithmeticExpression RPAREN
   17                     | arithmeticExpression operator arithmeticExpression
   18                     | identifier
   19                     | array

   20 identifier: var
   21           | CONST

   22 var: VAR
   23    | VAR_METHOD

   24 array: VAR LBRACKET arithmeticExpression RBRACKET
   25      | VAR LBRACKET CONST RBRACKET

   26 arrayDefine: VAR LBRACKET CONST RBRACKET SEMI

   27 operandTest: TEST_FOR_EQUAL
   28            | GEQ
   29            | LEQ
   30            | GTR
   31            | LSS

   32 operator: PLUS
   33         | MINUS
   34         | MULT
   35         | DIV
   36         | XOR


Terminals, with rules where they appear

$end (0) 0
error (256)
INPUTS (258)
OUTPUTS (259)
COMMA (260)
BANG (261)
EQUAL (262) 7 9
PLUS (263) 32
MINUS (264) 33
MULT (265) 34
DIV (266) 35
XOR (267) 36
GEQ (268) 28
LEQ (269) 29
NEQ (270)
GTR (271) 30
LSS (272) 31
AND (273) 11
OR (274) 12
TEST_FOR_EQUAL (275) 27
SEMI (276) 7 9 26
LBRACE (277) 4
RBRACE (278) 4
LPAREN (279) 10 16
RPAREN (280) 10 16
LBRACKET (281) 24 25 26
RBRACKET (282) 24 25 26
VAR (283) 22 24 25 26
VAR_METHOD (284) 23
CONST (285) 21 25 26


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
program (32)
    on left: 1, on right: 0
patternActionList (33)
    on left: 2 3, on right: 1 3
patternAction (34)
    on left: 4, on right: 3
action (35)
    on left: 5 6, on right: 4 6
statementAction (36)
    on left: 7 8 9, on right: 6
pattern (37)
    on left: 10 11 12 13, on right: 4 10 11 12
patternCompare (38)
    on left: 14 15, on right: 13
arithmeticExpression (39)
    on left: 16 17 18 19, on right: 7 9 14 16 17 24
identifier (40)
    on left: 20 21, on right: 15 18
var (41)
    on left: 22 23, on right: 7 14 20
array (42)
    on left: 24 25, on right: 9 19
arrayDefine (43)
    on left: 26, on right: 8
operandTest (44)
    on left: 27 28 29 30 31, on right: 14
operator (45)
    on left: 32 33 34 35 36, on right: 17


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (patternActionList)

    program            go to state 1
    patternActionList  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: patternActionList .
    3 patternActionList: patternActionList . patternAction

    LPAREN      shift, and go to state 4
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    $default  reduce using rule 1 (program)

    patternAction   go to state 8
    pattern         go to state 9
    patternCompare  go to state 10
    identifier      go to state 11
    var             go to state 12


state 3

    0 $accept: program $end .

    $default  accept


state 4

   10 pattern: LPAREN . pattern RPAREN

    LPAREN      shift, and go to state 4
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    pattern         go to state 13
    patternCompare  go to state 10
    identifier      go to state 11
    var             go to state 12


state 5

   22 var: VAR .

    $default  reduce using rule 22 (var)


state 6

   23 var: VAR_METHOD .

    $default  reduce using rule 23 (var)


state 7

   21 identifier: CONST .

    $default  reduce using rule 21 (identifier)


state 8

    3 patternActionList: patternActionList patternAction .

    $default  reduce using rule 3 (patternActionList)


state 9

    4 patternAction: pattern . LBRACE action RBRACE
   11 pattern: pattern . AND pattern
   12        | pattern . OR pattern

    AND     shift, and go to state 14
    OR      shift, and go to state 15
    LBRACE  shift, and go to state 16


state 10

   13 pattern: patternCompare .

    $default  reduce using rule 13 (pattern)


state 11

   15 patternCompare: identifier .

    $default  reduce using rule 15 (patternCompare)


state 12

   14 patternCompare: var . operandTest arithmeticExpression
   20 identifier: var .

    GEQ             shift, and go to state 17
    LEQ             shift, and go to state 18
    GTR             shift, and go to state 19
    LSS             shift, and go to state 20
    TEST_FOR_EQUAL  shift, and go to state 21

    $default  reduce using rule 20 (identifier)

    operandTest  go to state 22


state 13

   10 pattern: LPAREN pattern . RPAREN
   11        | pattern . AND pattern
   12        | pattern . OR pattern

    AND     shift, and go to state 14
    OR      shift, and go to state 15
    RPAREN  shift, and go to state 23


state 14

   11 pattern: pattern AND . pattern

    LPAREN      shift, and go to state 4
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    pattern         go to state 24
    patternCompare  go to state 10
    identifier      go to state 11
    var             go to state 12


state 15

   12 pattern: pattern OR . pattern

    LPAREN      shift, and go to state 4
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    pattern         go to state 25
    patternCompare  go to state 10
    identifier      go to state 11
    var             go to state 12


state 16

    4 patternAction: pattern LBRACE . action RBRACE

    $default  reduce using rule 5 (action)

    action  go to state 26


state 17

   28 operandTest: GEQ .

    $default  reduce using rule 28 (operandTest)


state 18

   29 operandTest: LEQ .

    $default  reduce using rule 29 (operandTest)


state 19

   30 operandTest: GTR .

    $default  reduce using rule 30 (operandTest)


state 20

   31 operandTest: LSS .

    $default  reduce using rule 31 (operandTest)


state 21

   27 operandTest: TEST_FOR_EQUAL .

    $default  reduce using rule 27 (operandTest)


state 22

   14 patternCompare: var operandTest . arithmeticExpression

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 28
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 29
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 23

   10 pattern: LPAREN pattern RPAREN .

    $default  reduce using rule 10 (pattern)


state 24

   11 pattern: pattern . AND pattern
   11        | pattern AND pattern .
   12        | pattern . OR pattern

    $default  reduce using rule 11 (pattern)


state 25

   11 pattern: pattern . AND pattern
   12        | pattern . OR pattern
   12        | pattern OR pattern .

    $default  reduce using rule 12 (pattern)


state 26

    4 patternAction: pattern LBRACE action . RBRACE
    6 action: action . statementAction

    RBRACE      shift, and go to state 33
    VAR         shift, and go to state 34
    VAR_METHOD  shift, and go to state 6

    statementAction  go to state 35
    var              go to state 36
    array            go to state 37
    arrayDefine      go to state 38


state 27

   16 arithmeticExpression: LPAREN . arithmeticExpression RPAREN

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 28
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 39
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 28

   22 var: VAR .
   24 array: VAR . LBRACKET arithmeticExpression RBRACKET
   25      | VAR . LBRACKET CONST RBRACKET

    LBRACKET  shift, and go to state 40

    $default  reduce using rule 22 (var)


state 29

   14 patternCompare: var operandTest arithmeticExpression .
   17 arithmeticExpression: arithmeticExpression . operator arithmeticExpression

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MULT   shift, and go to state 43
    DIV    shift, and go to state 44
    XOR    shift, and go to state 45

    $default  reduce using rule 14 (patternCompare)

    operator  go to state 46


state 30

   18 arithmeticExpression: identifier .

    $default  reduce using rule 18 (arithmeticExpression)


state 31

   20 identifier: var .

    $default  reduce using rule 20 (identifier)


state 32

   19 arithmeticExpression: array .

    $default  reduce using rule 19 (arithmeticExpression)


state 33

    4 patternAction: pattern LBRACE action RBRACE .

    $default  reduce using rule 4 (patternAction)


state 34

   22 var: VAR .
   24 array: VAR . LBRACKET arithmeticExpression RBRACKET
   25      | VAR . LBRACKET CONST RBRACKET
   26 arrayDefine: VAR . LBRACKET CONST RBRACKET SEMI

    LBRACKET  shift, and go to state 47

    $default  reduce using rule 22 (var)


state 35

    6 action: action statementAction .

    $default  reduce using rule 6 (action)


state 36

    7 statementAction: var . EQUAL arithmeticExpression SEMI

    EQUAL  shift, and go to state 48


state 37

    9 statementAction: array . EQUAL arithmeticExpression SEMI

    EQUAL  shift, and go to state 49


state 38

    8 statementAction: arrayDefine .

    $default  reduce using rule 8 (statementAction)


state 39

   16 arithmeticExpression: LPAREN arithmeticExpression . RPAREN
   17                     | arithmeticExpression . operator arithmeticExpression

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    MULT    shift, and go to state 43
    DIV     shift, and go to state 44
    XOR     shift, and go to state 45
    RPAREN  shift, and go to state 50

    operator  go to state 46


state 40

   24 array: VAR LBRACKET . arithmeticExpression RBRACKET
   25      | VAR LBRACKET . CONST RBRACKET

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 28
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 51

    arithmeticExpression  go to state 52
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 41

   32 operator: PLUS .

    $default  reduce using rule 32 (operator)


state 42

   33 operator: MINUS .

    $default  reduce using rule 33 (operator)


state 43

   34 operator: MULT .

    $default  reduce using rule 34 (operator)


state 44

   35 operator: DIV .

    $default  reduce using rule 35 (operator)


state 45

   36 operator: XOR .

    $default  reduce using rule 36 (operator)


state 46

   17 arithmeticExpression: arithmeticExpression operator . arithmeticExpression

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 28
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 53
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 47

   24 array: VAR LBRACKET . arithmeticExpression RBRACKET
   25      | VAR LBRACKET . CONST RBRACKET
   26 arrayDefine: VAR LBRACKET . CONST RBRACKET SEMI

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 28
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 54

    arithmeticExpression  go to state 52
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 48

    7 statementAction: var EQUAL . arithmeticExpression SEMI

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 28
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 55
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 49

    9 statementAction: array EQUAL . arithmeticExpression SEMI

    LPAREN      shift, and go to state 27
    VAR         shift, and go to state 28
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 56
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 50

   16 arithmeticExpression: LPAREN arithmeticExpression RPAREN .

    $default  reduce using rule 16 (arithmeticExpression)


state 51

   21 identifier: CONST .
   25 array: VAR LBRACKET CONST . RBRACKET

    RBRACKET  shift, and go to state 57

    RBRACKET  [reduce using rule 21 (identifier)]
    $default  reduce using rule 21 (identifier)


state 52

   17 arithmeticExpression: arithmeticExpression . operator arithmeticExpression
   24 array: VAR LBRACKET arithmeticExpression . RBRACKET

    PLUS      shift, and go to state 41
    MINUS     shift, and go to state 42
    MULT      shift, and go to state 43
    DIV       shift, and go to state 44
    XOR       shift, and go to state 45
    RBRACKET  shift, and go to state 58

    operator  go to state 46


state 53

   17 arithmeticExpression: arithmeticExpression . operator arithmeticExpression
   17                     | arithmeticExpression operator arithmeticExpression .

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MULT   shift, and go to state 43
    DIV    shift, and go to state 44
    XOR    shift, and go to state 45

    PLUS      [reduce using rule 17 (arithmeticExpression)]
    MINUS     [reduce using rule 17 (arithmeticExpression)]
    MULT      [reduce using rule 17 (arithmeticExpression)]
    DIV       [reduce using rule 17 (arithmeticExpression)]
    XOR       [reduce using rule 17 (arithmeticExpression)]
    $default  reduce using rule 17 (arithmeticExpression)

    operator  go to state 46


state 54

   21 identifier: CONST .
   25 array: VAR LBRACKET CONST . RBRACKET
   26 arrayDefine: VAR LBRACKET CONST . RBRACKET SEMI

    RBRACKET  shift, and go to state 59

    RBRACKET  [reduce using rule 21 (identifier)]
    $default  reduce using rule 21 (identifier)


state 55

    7 statementAction: var EQUAL arithmeticExpression . SEMI
   17 arithmeticExpression: arithmeticExpression . operator arithmeticExpression

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MULT   shift, and go to state 43
    DIV    shift, and go to state 44
    XOR    shift, and go to state 45
    SEMI   shift, and go to state 60

    operator  go to state 46


state 56

    9 statementAction: array EQUAL arithmeticExpression . SEMI
   17 arithmeticExpression: arithmeticExpression . operator arithmeticExpression

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MULT   shift, and go to state 43
    DIV    shift, and go to state 44
    XOR    shift, and go to state 45
    SEMI   shift, and go to state 61

    operator  go to state 46


state 57

   25 array: VAR LBRACKET CONST RBRACKET .

    $default  reduce using rule 25 (array)


state 58

   24 array: VAR LBRACKET arithmeticExpression RBRACKET .

    $default  reduce using rule 24 (array)


state 59

   25 array: VAR LBRACKET CONST RBRACKET .
   26 arrayDefine: VAR LBRACKET CONST RBRACKET . SEMI

    SEMI  shift, and go to state 62

    $default  reduce using rule 25 (array)


state 60

    7 statementAction: var EQUAL arithmeticExpression SEMI .

    $default  reduce using rule 7 (statementAction)


state 61

    9 statementAction: array EQUAL arithmeticExpression SEMI .

    $default  reduce using rule 9 (statementAction)


state 62

   26 arrayDefine: VAR LBRACKET CONST RBRACKET SEMI .

    $default  reduce using rule 26 (arrayDefine)
