Terminals unused in grammar

   INPUTS
   OUTPUTS
   VAR_METHOD
   CONST_FLOAT
   SHR
   SHL


State 85 conflicts: 15 shift/reduce


Grammar

    0 $accept: program $end

    1 program: functionDefnMain functionDefnList

    2 functionDefnList: /* empty */
    3                 | functionDefnList functionDefn

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE statementList RBRACE
    6             | MOVEABSOLUTE LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    7 statementList: /* empty */
    8              | statementList statement

    9 statement: statementAssign
   10          | statementIf
   11          | statementWhile
   12          | VAR LPAREN argList RPAREN SEMI
   13          | MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   14          | MOVEABSOLUTE LPAREN argList RPAREN SEMI
   15          | MOVERELATIVE LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   16          | MOVERELATIVE LPAREN argList RPAREN SEMI
   17          | SLEEP LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   18          | SLEEP LPAREN argList RPAREN SEMI
   19          | SLEEPUNTIL LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   20          | SLEEPUNTIL LPAREN argList RPAREN SEMI
   21          | LED LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   22          | LED LPAREN argList RPAREN SEMI
   23          | arrayDefine

   24 statementWhile: WHILE LPAREN expr RPAREN LBRACE statementList RBRACE

   25 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE
   26            | IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

   27 statementAssign: VAR EQUAL expr SEMI
   28                | VAR LBRACKET expr RBRACKET EQUAL expr SEMI

   29 expr: MINUS expr
   30     | BANG expr
   31     | TILDE expr
   32     | LPAREN expr RPAREN
   33     | expr PLUS expr
   34     | expr MINUS expr
   35     | expr MULT expr
   36     | expr DIV expr
   37     | expr XOR expr
   38     | expr AND expr
   39     | expr OR expr
   40     | expr BITWISEAND expr
   41     | expr BITWISEOR expr
   42     | expr TEST_FOR_EQUAL expr
   43     | expr NEQ expr
   44     | expr GEQ expr
   45     | expr LEQ expr
   46     | expr GTR expr
   47     | expr LSS expr
   48     | VAR
   49     | CONST
   50     | VAR LPAREN argList RPAREN
   51     | VAR LBRACKET expr RBRACKET

   52 argList: /* empty */
   53        | commaArgList

   54 commaArgList: expr
   55             | expr COMMA commaArgList

   56 defnArgList: /* empty */
   57            | defnCommaArgList

   58 defnCommaArgList: VAR
   59                 | BITWISEAND VAR
   60                 | defnCommaArgList COMMA VAR
   61                 | defnCommaArgList COMMA BITWISEAND VAR

   62 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST RBRACKET SEMI


Terminals, with rules where they appear

$end (0) 0
error (256)
INPUTS (258)
OUTPUTS (259)
COMMA (260) 13 15 17 19 21 55 60 61
BANG (261) 30
EQUAL (262) 27 28
LBRACE (263) 4 5 6 24 25 26
RBRACE (264) 4 5 6 24 25 26
ARRAYDEFINE (265) 62
IF (266) 25 26
ELSE (267) 26
WHILE (268) 24
VAR (269) 5 12 13 15 17 19 21 27 28 48 50 51 58 59 60 61 62
VAR_METHOD (270)
CONST (271) 49 62
CONST_FLOAT (272)
MAIN (273) 4
MOVEABSOLUTE (274) 6 13 14
MOVERELATIVE (275) 15 16
SLEEP (276) 17 18
SLEEPUNTIL (277) 19 20
LED (278) 21 22
BITWISEOR (279) 41
BITWISEAND (280) 13 15 17 19 21 40 59 61
OR (281) 39
AND (282) 38
SHR (283)
SHL (284)
LSS (285) 47
GTR (286) 46
NEQ (287) 43
LEQ (288) 45
GEQ (289) 44
TEST_FOR_EQUAL (290) 42
LPAREN (291) 4 5 6 12 13 14 15 16 17 18 19 20 21 22 24 25 26 32 50
MINUS (292) 29 34
PLUS (293) 33
XOR (294) 37
DIV (295) 36
MULT (296) 35
LBRACKET (297) 28 51 62
RBRACKET (298) 28 51 62
RPAREN (299) 4 5 6 12 13 14 15 16 17 18 19 20 21 22 24 25 26 32 50
SEMI (300) 12 13 14 15 16 17 18 19 20 21 22 27 28 62
TILDE (301) 31


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
functionDefnList (49)
    on left: 2 3, on right: 1 3
functionDefnMain (50)
    on left: 4, on right: 1
functionDefn (51)
    on left: 5 6, on right: 3
statementList (52)
    on left: 7 8, on right: 4 5 6 8 24 25 26
statement (53)
    on left: 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23, on right:
    8
statementWhile (54)
    on left: 24, on right: 11
statementIf (55)
    on left: 25 26, on right: 10
statementAssign (56)
    on left: 27 28, on right: 9
expr (57)
    on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
    47 48 49 50 51, on right: 13 15 17 19 21 24 25 26 27 28 29 30 31
    32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 51 54 55
argList (58)
    on left: 52 53, on right: 12 14 16 18 20 22 50
commaArgList (59)
    on left: 54 55, on right: 53 55
defnArgList (60)
    on left: 56 57, on right: 4 5 6
defnCommaArgList (61)
    on left: 58 59 60 61, on right: 57 60 61
arrayDefine (62)
    on left: 62, on right: 23


state 0

    0 $accept: . program $end

    MAIN  shift, and go to state 1

    program           go to state 2
    functionDefnMain  go to state 3


state 1

    4 functionDefnMain: MAIN . LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: functionDefnMain . functionDefnList

    $default  reduce using rule 2 (functionDefnList)

    functionDefnList  go to state 6


state 4

    4 functionDefnMain: MAIN LPAREN . defnArgList RPAREN LBRACE statementList RBRACE

    VAR         shift, and go to state 7
    BITWISEAND  shift, and go to state 8

    $default  reduce using rule 56 (defnArgList)

    defnArgList       go to state 9
    defnCommaArgList  go to state 10


state 5

    0 $accept: program $end .

    $default  accept


state 6

    1 program: functionDefnMain functionDefnList .
    3 functionDefnList: functionDefnList . functionDefn

    VAR           shift, and go to state 11
    MOVEABSOLUTE  shift, and go to state 12

    $default  reduce using rule 1 (program)

    functionDefn  go to state 13


state 7

   58 defnCommaArgList: VAR .

    $default  reduce using rule 58 (defnCommaArgList)


state 8

   59 defnCommaArgList: BITWISEAND . VAR

    VAR  shift, and go to state 14


state 9

    4 functionDefnMain: MAIN LPAREN defnArgList . RPAREN LBRACE statementList RBRACE

    RPAREN  shift, and go to state 15


state 10

   57 defnArgList: defnCommaArgList .
   60 defnCommaArgList: defnCommaArgList . COMMA VAR
   61                 | defnCommaArgList . COMMA BITWISEAND VAR

    COMMA  shift, and go to state 16

    $default  reduce using rule 57 (defnArgList)


state 11

    5 functionDefn: VAR . LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 17


state 12

    6 functionDefn: MOVEABSOLUTE . LPAREN defnArgList RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 18


state 13

    3 functionDefnList: functionDefnList functionDefn .

    $default  reduce using rule 3 (functionDefnList)


state 14

   59 defnCommaArgList: BITWISEAND VAR .

    $default  reduce using rule 59 (defnCommaArgList)


state 15

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 19


state 16

   60 defnCommaArgList: defnCommaArgList COMMA . VAR
   61                 | defnCommaArgList COMMA . BITWISEAND VAR

    VAR         shift, and go to state 20
    BITWISEAND  shift, and go to state 21


state 17

    5 functionDefn: VAR LPAREN . defnArgList RPAREN LBRACE statementList RBRACE

    VAR         shift, and go to state 7
    BITWISEAND  shift, and go to state 8

    $default  reduce using rule 56 (defnArgList)

    defnArgList       go to state 22
    defnCommaArgList  go to state 10


state 18

    6 functionDefn: MOVEABSOLUTE LPAREN . defnArgList RPAREN LBRACE statementList RBRACE

    VAR         shift, and go to state 7
    BITWISEAND  shift, and go to state 8

    $default  reduce using rule 56 (defnArgList)

    defnArgList       go to state 23
    defnCommaArgList  go to state 10


state 19

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 24


state 20

   60 defnCommaArgList: defnCommaArgList COMMA VAR .

    $default  reduce using rule 60 (defnCommaArgList)


state 21

   61 defnCommaArgList: defnCommaArgList COMMA BITWISEAND . VAR

    VAR  shift, and go to state 25


state 22

    5 functionDefn: VAR LPAREN defnArgList . RPAREN LBRACE statementList RBRACE

    RPAREN  shift, and go to state 26


state 23

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList . RPAREN LBRACE statementList RBRACE

    RPAREN  shift, and go to state 27


state 24

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN LBRACE statementList . RBRACE
    8 statementList: statementList . statement

    RBRACE        shift, and go to state 28
    ARRAYDEFINE   shift, and go to state 29
    IF            shift, and go to state 30
    WHILE         shift, and go to state 31
    VAR           shift, and go to state 32
    MOVEABSOLUTE  shift, and go to state 33
    MOVERELATIVE  shift, and go to state 34
    SLEEP         shift, and go to state 35
    SLEEPUNTIL    shift, and go to state 36
    LED           shift, and go to state 37

    statement        go to state 38
    statementWhile   go to state 39
    statementIf      go to state 40
    statementAssign  go to state 41
    arrayDefine      go to state 42


state 25

   61 defnCommaArgList: defnCommaArgList COMMA BITWISEAND VAR .

    $default  reduce using rule 61 (defnCommaArgList)


state 26

    5 functionDefn: VAR LPAREN defnArgList RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 43


state 27

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 44


state 28

    4 functionDefnMain: MAIN LPAREN defnArgList RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 4 (functionDefnMain)


state 29

   62 arrayDefine: ARRAYDEFINE . VAR LBRACKET CONST RBRACKET SEMI

    VAR  shift, and go to state 45


state 30

   25 statementIf: IF . LPAREN expr RPAREN LBRACE statementList RBRACE
   26            | IF . LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

    LPAREN  shift, and go to state 46


state 31

   24 statementWhile: WHILE . LPAREN expr RPAREN LBRACE statementList RBRACE

    LPAREN  shift, and go to state 47


state 32

   12 statement: VAR . LPAREN argList RPAREN SEMI
   27 statementAssign: VAR . EQUAL expr SEMI
   28                | VAR . LBRACKET expr RBRACKET EQUAL expr SEMI

    EQUAL     shift, and go to state 48
    LPAREN    shift, and go to state 49
    LBRACKET  shift, and go to state 50


state 33

   13 statement: MOVEABSOLUTE . LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   14          | MOVEABSOLUTE . LPAREN argList RPAREN SEMI

    LPAREN  shift, and go to state 51


state 34

   15 statement: MOVERELATIVE . LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   16          | MOVERELATIVE . LPAREN argList RPAREN SEMI

    LPAREN  shift, and go to state 52


state 35

   17 statement: SLEEP . LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   18          | SLEEP . LPAREN argList RPAREN SEMI

    LPAREN  shift, and go to state 53


state 36

   19 statement: SLEEPUNTIL . LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   20          | SLEEPUNTIL . LPAREN argList RPAREN SEMI

    LPAREN  shift, and go to state 54


state 37

   21 statement: LED . LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI
   22          | LED . LPAREN argList RPAREN SEMI

    LPAREN  shift, and go to state 55


state 38

    8 statementList: statementList statement .

    $default  reduce using rule 8 (statementList)


state 39

   11 statement: statementWhile .

    $default  reduce using rule 11 (statement)


state 40

   10 statement: statementIf .

    $default  reduce using rule 10 (statement)


state 41

    9 statement: statementAssign .

    $default  reduce using rule 9 (statement)


state 42

   23 statement: arrayDefine .

    $default  reduce using rule 23 (statement)


state 43

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 56


state 44

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 57


state 45

   62 arrayDefine: ARRAYDEFINE VAR . LBRACKET CONST RBRACKET SEMI

    LBRACKET  shift, and go to state 58


state 46

   25 statementIf: IF LPAREN . expr RPAREN LBRACE statementList RBRACE
   26            | IF LPAREN . expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 65


state 47

   24 statementWhile: WHILE LPAREN . expr RPAREN LBRACE statementList RBRACE

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 66


state 48

   27 statementAssign: VAR EQUAL . expr SEMI

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 67


state 49

   12 statement: VAR LPAREN . argList RPAREN SEMI

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    $default  reduce using rule 52 (argList)

    expr          go to state 68
    argList       go to state 69
    commaArgList  go to state 70


state 50

   28 statementAssign: VAR LBRACKET . expr RBRACKET EQUAL expr SEMI

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 71


state 51

   13 statement: MOVEABSOLUTE LPAREN . BITWISEAND VAR COMMA expr RPAREN SEMI
   14          | MOVEABSOLUTE LPAREN . argList RPAREN SEMI

    BANG        shift, and go to state 59
    VAR         shift, and go to state 60
    CONST       shift, and go to state 61
    BITWISEAND  shift, and go to state 72
    LPAREN      shift, and go to state 62
    MINUS       shift, and go to state 63
    TILDE       shift, and go to state 64

    $default  reduce using rule 52 (argList)

    expr          go to state 68
    argList       go to state 73
    commaArgList  go to state 70


state 52

   15 statement: MOVERELATIVE LPAREN . BITWISEAND VAR COMMA expr RPAREN SEMI
   16          | MOVERELATIVE LPAREN . argList RPAREN SEMI

    BANG        shift, and go to state 59
    VAR         shift, and go to state 60
    CONST       shift, and go to state 61
    BITWISEAND  shift, and go to state 74
    LPAREN      shift, and go to state 62
    MINUS       shift, and go to state 63
    TILDE       shift, and go to state 64

    $default  reduce using rule 52 (argList)

    expr          go to state 68
    argList       go to state 75
    commaArgList  go to state 70


state 53

   17 statement: SLEEP LPAREN . BITWISEAND VAR COMMA expr RPAREN SEMI
   18          | SLEEP LPAREN . argList RPAREN SEMI

    BANG        shift, and go to state 59
    VAR         shift, and go to state 60
    CONST       shift, and go to state 61
    BITWISEAND  shift, and go to state 76
    LPAREN      shift, and go to state 62
    MINUS       shift, and go to state 63
    TILDE       shift, and go to state 64

    $default  reduce using rule 52 (argList)

    expr          go to state 68
    argList       go to state 77
    commaArgList  go to state 70


state 54

   19 statement: SLEEPUNTIL LPAREN . BITWISEAND VAR COMMA expr RPAREN SEMI
   20          | SLEEPUNTIL LPAREN . argList RPAREN SEMI

    BANG        shift, and go to state 59
    VAR         shift, and go to state 60
    CONST       shift, and go to state 61
    BITWISEAND  shift, and go to state 78
    LPAREN      shift, and go to state 62
    MINUS       shift, and go to state 63
    TILDE       shift, and go to state 64

    $default  reduce using rule 52 (argList)

    expr          go to state 68
    argList       go to state 79
    commaArgList  go to state 70


state 55

   21 statement: LED LPAREN . BITWISEAND VAR COMMA expr RPAREN SEMI
   22          | LED LPAREN . argList RPAREN SEMI

    BANG        shift, and go to state 59
    VAR         shift, and go to state 60
    CONST       shift, and go to state 61
    BITWISEAND  shift, and go to state 80
    LPAREN      shift, and go to state 62
    MINUS       shift, and go to state 63
    TILDE       shift, and go to state 64

    $default  reduce using rule 52 (argList)

    expr          go to state 68
    argList       go to state 81
    commaArgList  go to state 70


state 56

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE statementList . RBRACE
    8 statementList: statementList . statement

    RBRACE        shift, and go to state 82
    ARRAYDEFINE   shift, and go to state 29
    IF            shift, and go to state 30
    WHILE         shift, and go to state 31
    VAR           shift, and go to state 32
    MOVEABSOLUTE  shift, and go to state 33
    MOVERELATIVE  shift, and go to state 34
    SLEEP         shift, and go to state 35
    SLEEPUNTIL    shift, and go to state 36
    LED           shift, and go to state 37

    statement        go to state 38
    statementWhile   go to state 39
    statementIf      go to state 40
    statementAssign  go to state 41
    arrayDefine      go to state 42


state 57

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList RPAREN LBRACE statementList . RBRACE
    8 statementList: statementList . statement

    RBRACE        shift, and go to state 83
    ARRAYDEFINE   shift, and go to state 29
    IF            shift, and go to state 30
    WHILE         shift, and go to state 31
    VAR           shift, and go to state 32
    MOVEABSOLUTE  shift, and go to state 33
    MOVERELATIVE  shift, and go to state 34
    SLEEP         shift, and go to state 35
    SLEEPUNTIL    shift, and go to state 36
    LED           shift, and go to state 37

    statement        go to state 38
    statementWhile   go to state 39
    statementIf      go to state 40
    statementAssign  go to state 41
    arrayDefine      go to state 42


state 58

   62 arrayDefine: ARRAYDEFINE VAR LBRACKET . CONST RBRACKET SEMI

    CONST  shift, and go to state 84


state 59

   30 expr: BANG . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 85


state 60

   48 expr: VAR .
   50     | VAR . LPAREN argList RPAREN
   51     | VAR . LBRACKET expr RBRACKET

    LPAREN    shift, and go to state 86
    LBRACKET  shift, and go to state 87

    $default  reduce using rule 48 (expr)


state 61

   49 expr: CONST .

    $default  reduce using rule 49 (expr)


state 62

   32 expr: LPAREN . expr RPAREN

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 88


state 63

   29 expr: MINUS . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 89


state 64

   31 expr: TILDE . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 90


state 65

   25 statementIf: IF LPAREN expr . RPAREN LBRACE statementList RBRACE
   26            | IF LPAREN expr . RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RPAREN          shift, and go to state 106


state 66

   24 statementWhile: WHILE LPAREN expr . RPAREN LBRACE statementList RBRACE
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RPAREN          shift, and go to state 107


state 67

   27 statementAssign: VAR EQUAL expr . SEMI
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    SEMI            shift, and go to state 108


state 68

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr
   54 commaArgList: expr .
   55             | expr . COMMA commaArgList

    COMMA           shift, and go to state 109
    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105

    $default  reduce using rule 54 (commaArgList)


state 69

   12 statement: VAR LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 110


state 70

   53 argList: commaArgList .

    $default  reduce using rule 53 (argList)


state 71

   28 statementAssign: VAR LBRACKET expr . RBRACKET EQUAL expr SEMI
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RBRACKET        shift, and go to state 111


state 72

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND . VAR COMMA expr RPAREN SEMI

    VAR  shift, and go to state 112


state 73

   14 statement: MOVEABSOLUTE LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 113


state 74

   15 statement: MOVERELATIVE LPAREN BITWISEAND . VAR COMMA expr RPAREN SEMI

    VAR  shift, and go to state 114


state 75

   16 statement: MOVERELATIVE LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 115


state 76

   17 statement: SLEEP LPAREN BITWISEAND . VAR COMMA expr RPAREN SEMI

    VAR  shift, and go to state 116


state 77

   18 statement: SLEEP LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 117


state 78

   19 statement: SLEEPUNTIL LPAREN BITWISEAND . VAR COMMA expr RPAREN SEMI

    VAR  shift, and go to state 118


state 79

   20 statement: SLEEPUNTIL LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 119


state 80

   21 statement: LED LPAREN BITWISEAND . VAR COMMA expr RPAREN SEMI

    VAR  shift, and go to state 120


state 81

   22 statement: LED LPAREN argList . RPAREN SEMI

    RPAREN  shift, and go to state 121


state 82

    5 functionDefn: VAR LPAREN defnArgList RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 5 (functionDefn)


state 83

    6 functionDefn: MOVEABSOLUTE LPAREN defnArgList RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 6 (functionDefn)


state 84

   62 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST . RBRACKET SEMI

    RBRACKET  shift, and go to state 122


state 85

   30 expr: BANG expr .
   33     | expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105

    BITWISEOR       [reduce using rule 30 (expr)]
    BITWISEAND      [reduce using rule 30 (expr)]
    OR              [reduce using rule 30 (expr)]
    AND             [reduce using rule 30 (expr)]
    LSS             [reduce using rule 30 (expr)]
    GTR             [reduce using rule 30 (expr)]
    NEQ             [reduce using rule 30 (expr)]
    LEQ             [reduce using rule 30 (expr)]
    GEQ             [reduce using rule 30 (expr)]
    TEST_FOR_EQUAL  [reduce using rule 30 (expr)]
    MINUS           [reduce using rule 30 (expr)]
    PLUS            [reduce using rule 30 (expr)]
    XOR             [reduce using rule 30 (expr)]
    DIV             [reduce using rule 30 (expr)]
    MULT            [reduce using rule 30 (expr)]
    $default        reduce using rule 30 (expr)


state 86

   50 expr: VAR LPAREN . argList RPAREN

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    $default  reduce using rule 52 (argList)

    expr          go to state 68
    argList       go to state 123
    commaArgList  go to state 70


state 87

   51 expr: VAR LBRACKET . expr RBRACKET

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 124


state 88

   32 expr: LPAREN expr . RPAREN
   33     | expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RPAREN          shift, and go to state 125


state 89

   29 expr: MINUS expr .
   33     | expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    XOR   shift, and go to state 103
    DIV   shift, and go to state 104
    MULT  shift, and go to state 105

    $default  reduce using rule 29 (expr)


state 90

   31 expr: TILDE expr .
   33     | expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    $default  reduce using rule 31 (expr)


state 91

   41 expr: expr BITWISEOR . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 126


state 92

   40 expr: expr BITWISEAND . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 127


state 93

   39 expr: expr OR . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 128


state 94

   38 expr: expr AND . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 129


state 95

   47 expr: expr LSS . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 130


state 96

   46 expr: expr GTR . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 131


state 97

   43 expr: expr NEQ . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 132


state 98

   45 expr: expr LEQ . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 133


state 99

   44 expr: expr GEQ . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 134


state 100

   42 expr: expr TEST_FOR_EQUAL . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 135


state 101

   34 expr: expr MINUS . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 136


state 102

   33 expr: expr PLUS . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 137


state 103

   37 expr: expr XOR . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 138


state 104

   36 expr: expr DIV . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 139


state 105

   35 expr: expr MULT . expr

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 140


state 106

   25 statementIf: IF LPAREN expr RPAREN . LBRACE statementList RBRACE
   26            | IF LPAREN expr RPAREN . LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE

    LBRACE  shift, and go to state 141


state 107

   24 statementWhile: WHILE LPAREN expr RPAREN . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 142


state 108

   27 statementAssign: VAR EQUAL expr SEMI .

    $default  reduce using rule 27 (statementAssign)


state 109

   55 commaArgList: expr COMMA . commaArgList

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr          go to state 68
    commaArgList  go to state 143


state 110

   12 statement: VAR LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 144


state 111

   28 statementAssign: VAR LBRACKET expr RBRACKET . EQUAL expr SEMI

    EQUAL  shift, and go to state 145


state 112

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR . COMMA expr RPAREN SEMI

    COMMA  shift, and go to state 146


state 113

   14 statement: MOVEABSOLUTE LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 147


state 114

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR . COMMA expr RPAREN SEMI

    COMMA  shift, and go to state 148


state 115

   16 statement: MOVERELATIVE LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 149


state 116

   17 statement: SLEEP LPAREN BITWISEAND VAR . COMMA expr RPAREN SEMI

    COMMA  shift, and go to state 150


state 117

   18 statement: SLEEP LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 151


state 118

   19 statement: SLEEPUNTIL LPAREN BITWISEAND VAR . COMMA expr RPAREN SEMI

    COMMA  shift, and go to state 152


state 119

   20 statement: SLEEPUNTIL LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 153


state 120

   21 statement: LED LPAREN BITWISEAND VAR . COMMA expr RPAREN SEMI

    COMMA  shift, and go to state 154


state 121

   22 statement: LED LPAREN argList RPAREN . SEMI

    SEMI  shift, and go to state 155


state 122

   62 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST RBRACKET . SEMI

    SEMI  shift, and go to state 156


state 123

   50 expr: VAR LPAREN argList . RPAREN

    RPAREN  shift, and go to state 157


state 124

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr
   51     | VAR LBRACKET expr . RBRACKET

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RBRACKET        shift, and go to state 158


state 125

   32 expr: LPAREN expr RPAREN .

    $default  reduce using rule 32 (expr)


state 126

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   41     | expr BITWISEOR expr .
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105

    $default  reduce using rule 41 (expr)


state 127

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   40     | expr BITWISEAND expr .
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105

    $default  reduce using rule 40 (expr)


state 128

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   39     | expr OR expr .
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105

    $default  reduce using rule 39 (expr)


state 129

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   38     | expr AND expr .
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105

    $default  reduce using rule 38 (expr)


state 130

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr
   47     | expr LSS expr .

    MINUS  shift, and go to state 101
    PLUS   shift, and go to state 102
    XOR    shift, and go to state 103
    DIV    shift, and go to state 104
    MULT   shift, and go to state 105

    $default  reduce using rule 47 (expr)


state 131

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   46     | expr GTR expr .
   47     | expr . LSS expr

    MINUS  shift, and go to state 101
    PLUS   shift, and go to state 102
    XOR    shift, and go to state 103
    DIV    shift, and go to state 104
    MULT   shift, and go to state 105

    $default  reduce using rule 46 (expr)


state 132

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   43     | expr NEQ expr .
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    MINUS  shift, and go to state 101
    PLUS   shift, and go to state 102
    XOR    shift, and go to state 103
    DIV    shift, and go to state 104
    MULT   shift, and go to state 105

    $default  reduce using rule 43 (expr)


state 133

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   45     | expr LEQ expr .
   46     | expr . GTR expr
   47     | expr . LSS expr

    MINUS  shift, and go to state 101
    PLUS   shift, and go to state 102
    XOR    shift, and go to state 103
    DIV    shift, and go to state 104
    MULT   shift, and go to state 105

    $default  reduce using rule 45 (expr)


state 134

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   44     | expr GEQ expr .
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    MINUS  shift, and go to state 101
    PLUS   shift, and go to state 102
    XOR    shift, and go to state 103
    DIV    shift, and go to state 104
    MULT   shift, and go to state 105

    $default  reduce using rule 44 (expr)


state 135

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   42     | expr TEST_FOR_EQUAL expr .
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    MINUS  shift, and go to state 101
    PLUS   shift, and go to state 102
    XOR    shift, and go to state 103
    DIV    shift, and go to state 104
    MULT   shift, and go to state 105

    $default  reduce using rule 42 (expr)


state 136

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   34     | expr MINUS expr .
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    XOR   shift, and go to state 103
    DIV   shift, and go to state 104
    MULT  shift, and go to state 105

    $default  reduce using rule 34 (expr)


state 137

   33 expr: expr . PLUS expr
   33     | expr PLUS expr .
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    XOR   shift, and go to state 103
    DIV   shift, and go to state 104
    MULT  shift, and go to state 105

    $default  reduce using rule 33 (expr)


state 138

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   37     | expr XOR expr .
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    DIV   shift, and go to state 104
    MULT  shift, and go to state 105

    $default  reduce using rule 37 (expr)


state 139

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   36     | expr DIV expr .
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    $default  reduce using rule 36 (expr)


state 140

   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   35     | expr MULT expr .
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    $default  reduce using rule 35 (expr)


state 141

   25 statementIf: IF LPAREN expr RPAREN LBRACE . statementList RBRACE
   26            | IF LPAREN expr RPAREN LBRACE . statementList RBRACE ELSE LBRACE statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 159


state 142

   24 statementWhile: WHILE LPAREN expr RPAREN LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 160


state 143

   55 commaArgList: expr COMMA commaArgList .

    $default  reduce using rule 55 (commaArgList)


state 144

   12 statement: VAR LPAREN argList RPAREN SEMI .

    $default  reduce using rule 12 (statement)


state 145

   28 statementAssign: VAR LBRACKET expr RBRACKET EQUAL . expr SEMI

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 161


state 146

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA . expr RPAREN SEMI

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 162


state 147

   14 statement: MOVEABSOLUTE LPAREN argList RPAREN SEMI .

    $default  reduce using rule 14 (statement)


state 148

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR COMMA . expr RPAREN SEMI

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 163


state 149

   16 statement: MOVERELATIVE LPAREN argList RPAREN SEMI .

    $default  reduce using rule 16 (statement)


state 150

   17 statement: SLEEP LPAREN BITWISEAND VAR COMMA . expr RPAREN SEMI

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 164


state 151

   18 statement: SLEEP LPAREN argList RPAREN SEMI .

    $default  reduce using rule 18 (statement)


state 152

   19 statement: SLEEPUNTIL LPAREN BITWISEAND VAR COMMA . expr RPAREN SEMI

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 165


state 153

   20 statement: SLEEPUNTIL LPAREN argList RPAREN SEMI .

    $default  reduce using rule 20 (statement)


state 154

   21 statement: LED LPAREN BITWISEAND VAR COMMA . expr RPAREN SEMI

    BANG    shift, and go to state 59
    VAR     shift, and go to state 60
    CONST   shift, and go to state 61
    LPAREN  shift, and go to state 62
    MINUS   shift, and go to state 63
    TILDE   shift, and go to state 64

    expr  go to state 166


state 155

   22 statement: LED LPAREN argList RPAREN SEMI .

    $default  reduce using rule 22 (statement)


state 156

   62 arrayDefine: ARRAYDEFINE VAR LBRACKET CONST RBRACKET SEMI .

    $default  reduce using rule 62 (arrayDefine)


state 157

   50 expr: VAR LPAREN argList RPAREN .

    $default  reduce using rule 50 (expr)


state 158

   51 expr: VAR LBRACKET expr RBRACKET .

    $default  reduce using rule 51 (expr)


state 159

    8 statementList: statementList . statement
   25 statementIf: IF LPAREN expr RPAREN LBRACE statementList . RBRACE
   26            | IF LPAREN expr RPAREN LBRACE statementList . RBRACE ELSE LBRACE statementList RBRACE

    RBRACE        shift, and go to state 167
    ARRAYDEFINE   shift, and go to state 29
    IF            shift, and go to state 30
    WHILE         shift, and go to state 31
    VAR           shift, and go to state 32
    MOVEABSOLUTE  shift, and go to state 33
    MOVERELATIVE  shift, and go to state 34
    SLEEP         shift, and go to state 35
    SLEEPUNTIL    shift, and go to state 36
    LED           shift, and go to state 37

    statement        go to state 38
    statementWhile   go to state 39
    statementIf      go to state 40
    statementAssign  go to state 41
    arrayDefine      go to state 42


state 160

    8 statementList: statementList . statement
   24 statementWhile: WHILE LPAREN expr RPAREN LBRACE statementList . RBRACE

    RBRACE        shift, and go to state 168
    ARRAYDEFINE   shift, and go to state 29
    IF            shift, and go to state 30
    WHILE         shift, and go to state 31
    VAR           shift, and go to state 32
    MOVEABSOLUTE  shift, and go to state 33
    MOVERELATIVE  shift, and go to state 34
    SLEEP         shift, and go to state 35
    SLEEPUNTIL    shift, and go to state 36
    LED           shift, and go to state 37

    statement        go to state 38
    statementWhile   go to state 39
    statementIf      go to state 40
    statementAssign  go to state 41
    arrayDefine      go to state 42


state 161

   28 statementAssign: VAR LBRACKET expr RBRACKET EQUAL expr . SEMI
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    SEMI            shift, and go to state 169


state 162

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA expr . RPAREN SEMI
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RPAREN          shift, and go to state 170


state 163

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR COMMA expr . RPAREN SEMI
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RPAREN          shift, and go to state 171


state 164

   17 statement: SLEEP LPAREN BITWISEAND VAR COMMA expr . RPAREN SEMI
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RPAREN          shift, and go to state 172


state 165

   19 statement: SLEEPUNTIL LPAREN BITWISEAND VAR COMMA expr . RPAREN SEMI
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RPAREN          shift, and go to state 173


state 166

   21 statement: LED LPAREN BITWISEAND VAR COMMA expr . RPAREN SEMI
   33 expr: expr . PLUS expr
   34     | expr . MINUS expr
   35     | expr . MULT expr
   36     | expr . DIV expr
   37     | expr . XOR expr
   38     | expr . AND expr
   39     | expr . OR expr
   40     | expr . BITWISEAND expr
   41     | expr . BITWISEOR expr
   42     | expr . TEST_FOR_EQUAL expr
   43     | expr . NEQ expr
   44     | expr . GEQ expr
   45     | expr . LEQ expr
   46     | expr . GTR expr
   47     | expr . LSS expr

    BITWISEOR       shift, and go to state 91
    BITWISEAND      shift, and go to state 92
    OR              shift, and go to state 93
    AND             shift, and go to state 94
    LSS             shift, and go to state 95
    GTR             shift, and go to state 96
    NEQ             shift, and go to state 97
    LEQ             shift, and go to state 98
    GEQ             shift, and go to state 99
    TEST_FOR_EQUAL  shift, and go to state 100
    MINUS           shift, and go to state 101
    PLUS            shift, and go to state 102
    XOR             shift, and go to state 103
    DIV             shift, and go to state 104
    MULT            shift, and go to state 105
    RPAREN          shift, and go to state 174


state 167

   25 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE .
   26            | IF LPAREN expr RPAREN LBRACE statementList RBRACE . ELSE LBRACE statementList RBRACE

    ELSE  shift, and go to state 175

    $default  reduce using rule 25 (statementIf)


state 168

   24 statementWhile: WHILE LPAREN expr RPAREN LBRACE statementList RBRACE .

    $default  reduce using rule 24 (statementWhile)


state 169

   28 statementAssign: VAR LBRACKET expr RBRACKET EQUAL expr SEMI .

    $default  reduce using rule 28 (statementAssign)


state 170

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA expr RPAREN . SEMI

    SEMI  shift, and go to state 176


state 171

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR COMMA expr RPAREN . SEMI

    SEMI  shift, and go to state 177


state 172

   17 statement: SLEEP LPAREN BITWISEAND VAR COMMA expr RPAREN . SEMI

    SEMI  shift, and go to state 178


state 173

   19 statement: SLEEPUNTIL LPAREN BITWISEAND VAR COMMA expr RPAREN . SEMI

    SEMI  shift, and go to state 179


state 174

   21 statement: LED LPAREN BITWISEAND VAR COMMA expr RPAREN . SEMI

    SEMI  shift, and go to state 180


state 175

   26 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE . LBRACE statementList RBRACE

    LBRACE  shift, and go to state 181


state 176

   13 statement: MOVEABSOLUTE LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI .

    $default  reduce using rule 13 (statement)


state 177

   15 statement: MOVERELATIVE LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI .

    $default  reduce using rule 15 (statement)


state 178

   17 statement: SLEEP LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI .

    $default  reduce using rule 17 (statement)


state 179

   19 statement: SLEEPUNTIL LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI .

    $default  reduce using rule 19 (statement)


state 180

   21 statement: LED LPAREN BITWISEAND VAR COMMA expr RPAREN SEMI .

    $default  reduce using rule 21 (statement)


state 181

   26 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE . statementList RBRACE

    $default  reduce using rule 7 (statementList)

    statementList  go to state 182


state 182

    8 statementList: statementList . statement
   26 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList . RBRACE

    RBRACE        shift, and go to state 183
    ARRAYDEFINE   shift, and go to state 29
    IF            shift, and go to state 30
    WHILE         shift, and go to state 31
    VAR           shift, and go to state 32
    MOVEABSOLUTE  shift, and go to state 33
    MOVERELATIVE  shift, and go to state 34
    SLEEP         shift, and go to state 35
    SLEEPUNTIL    shift, and go to state 36
    LED           shift, and go to state 37

    statement        go to state 38
    statementWhile   go to state 39
    statementIf      go to state 40
    statementAssign  go to state 41
    arrayDefine      go to state 42


state 183

   26 statementIf: IF LPAREN expr RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE .

    $default  reduce using rule 26 (statementIf)
