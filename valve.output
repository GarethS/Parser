Terminals unused in grammar

   INPUTS
   OUTPUTS
   COMMA
   BANG
   NEQ


State 26 conflicts: 2 shift/reduce
State 50 conflicts: 5 shift/reduce


Grammar

    0 $accept: program $end

    1 program: patternActionList

    2 patternActionList: /* empty */
    3                  | patternActionList patternAction

    4 patternAction: pattern LBRACE action RBRACE

    5 action: /* empty */
    6       | action statementAction

    7 statementAction: var EQUAL arithmeticExpression SEMI
    8                | arrayDefine

    9 pattern: LPAREN pattern RPAREN
   10        | pattern andOr pattern
   11        | patternCompare

   12 patternCompare: var operandTest arithmeticExpression
   13               | identifier

   14 arithmeticExpression: LPAREN arithmeticExpression RPAREN
   15                     | arithmeticExpression operator arithmeticExpression
   16                     | identifier
   17                     | array

   18 identifier: var
   19           | CONST

   20 var: VAR
   21    | VAR_METHOD

   22 arrayDefine: VAR LBRACKET CONST RBRACKET SEMI

   23 array: LBRACKET arithmeticExpression RBRACKET

   24 andOr: AND
   25      | OR

   26 operandTest: TEST_FOR_EQUAL
   27            | GEQ
   28            | LEQ
   29            | GTR
   30            | LSS

   31 operator: PLUS
   32         | MINUS
   33         | MULT
   34         | DIV
   35         | XOR


Terminals, with rules where they appear

$end (0) 0
error (256)
INPUTS (258)
OUTPUTS (259)
COMMA (260)
BANG (261)
EQUAL (262) 7
PLUS (263) 31
MINUS (264) 32
MULT (265) 33
DIV (266) 34
XOR (267) 35
GEQ (268) 27
LEQ (269) 28
NEQ (270)
GTR (271) 29
LSS (272) 30
AND (273) 24
OR (274) 25
TEST_FOR_EQUAL (275) 26
SEMI (276) 7 22
LBRACE (277) 4
RBRACE (278) 4
LPAREN (279) 9 14
RPAREN (280) 9 14
LBRACKET (281) 22 23
RBRACKET (282) 22 23
VAR (283) 20 22
VAR_METHOD (284) 21
CONST (285) 19 22


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
program (32)
    on left: 1, on right: 0
patternActionList (33)
    on left: 2 3, on right: 1 3
patternAction (34)
    on left: 4, on right: 3
action (35)
    on left: 5 6, on right: 4 6
statementAction (36)
    on left: 7 8, on right: 6
pattern (37)
    on left: 9 10 11, on right: 4 9 10
patternCompare (38)
    on left: 12 13, on right: 11
arithmeticExpression (39)
    on left: 14 15 16 17, on right: 7 12 14 15 23
identifier (40)
    on left: 18 19, on right: 13 16
var (41)
    on left: 20 21, on right: 7 12 18
arrayDefine (42)
    on left: 22, on right: 8
array (43)
    on left: 23, on right: 17
andOr (44)
    on left: 24 25, on right: 10
operandTest (45)
    on left: 26 27 28 29 30, on right: 12
operator (46)
    on left: 31 32 33 34 35, on right: 15


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (patternActionList)

    program            go to state 1
    patternActionList  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: patternActionList .
    3 patternActionList: patternActionList . patternAction

    LPAREN      shift, and go to state 4
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    $default  reduce using rule 1 (program)

    patternAction   go to state 8
    pattern         go to state 9
    patternCompare  go to state 10
    identifier      go to state 11
    var             go to state 12


state 3

    0 $accept: program $end .

    $default  accept


state 4

    9 pattern: LPAREN . pattern RPAREN

    LPAREN      shift, and go to state 4
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    pattern         go to state 13
    patternCompare  go to state 10
    identifier      go to state 11
    var             go to state 12


state 5

   20 var: VAR .

    $default  reduce using rule 20 (var)


state 6

   21 var: VAR_METHOD .

    $default  reduce using rule 21 (var)


state 7

   19 identifier: CONST .

    $default  reduce using rule 19 (identifier)


state 8

    3 patternActionList: patternActionList patternAction .

    $default  reduce using rule 3 (patternActionList)


state 9

    4 patternAction: pattern . LBRACE action RBRACE
   10 pattern: pattern . andOr pattern

    AND     shift, and go to state 14
    OR      shift, and go to state 15
    LBRACE  shift, and go to state 16

    andOr  go to state 17


state 10

   11 pattern: patternCompare .

    $default  reduce using rule 11 (pattern)


state 11

   13 patternCompare: identifier .

    $default  reduce using rule 13 (patternCompare)


state 12

   12 patternCompare: var . operandTest arithmeticExpression
   18 identifier: var .

    GEQ             shift, and go to state 18
    LEQ             shift, and go to state 19
    GTR             shift, and go to state 20
    LSS             shift, and go to state 21
    TEST_FOR_EQUAL  shift, and go to state 22

    $default  reduce using rule 18 (identifier)

    operandTest  go to state 23


state 13

    9 pattern: LPAREN pattern . RPAREN
   10        | pattern . andOr pattern

    AND     shift, and go to state 14
    OR      shift, and go to state 15
    RPAREN  shift, and go to state 24

    andOr  go to state 17


state 14

   24 andOr: AND .

    $default  reduce using rule 24 (andOr)


state 15

   25 andOr: OR .

    $default  reduce using rule 25 (andOr)


state 16

    4 patternAction: pattern LBRACE . action RBRACE

    $default  reduce using rule 5 (action)

    action  go to state 25


state 17

   10 pattern: pattern andOr . pattern

    LPAREN      shift, and go to state 4
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    pattern         go to state 26
    patternCompare  go to state 10
    identifier      go to state 11
    var             go to state 12


state 18

   27 operandTest: GEQ .

    $default  reduce using rule 27 (operandTest)


state 19

   28 operandTest: LEQ .

    $default  reduce using rule 28 (operandTest)


state 20

   29 operandTest: GTR .

    $default  reduce using rule 29 (operandTest)


state 21

   30 operandTest: LSS .

    $default  reduce using rule 30 (operandTest)


state 22

   26 operandTest: TEST_FOR_EQUAL .

    $default  reduce using rule 26 (operandTest)


state 23

   12 patternCompare: var operandTest . arithmeticExpression

    LPAREN      shift, and go to state 27
    LBRACKET    shift, and go to state 28
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 29
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 24

    9 pattern: LPAREN pattern RPAREN .

    $default  reduce using rule 9 (pattern)


state 25

    4 patternAction: pattern LBRACE action . RBRACE
    6 action: action . statementAction

    RBRACE      shift, and go to state 33
    VAR         shift, and go to state 34
    VAR_METHOD  shift, and go to state 6

    statementAction  go to state 35
    var              go to state 36
    arrayDefine      go to state 37


state 26

   10 pattern: pattern . andOr pattern
   10        | pattern andOr pattern .

    AND  shift, and go to state 14
    OR   shift, and go to state 15

    AND       [reduce using rule 10 (pattern)]
    OR        [reduce using rule 10 (pattern)]
    $default  reduce using rule 10 (pattern)

    andOr  go to state 17


state 27

   14 arithmeticExpression: LPAREN . arithmeticExpression RPAREN

    LPAREN      shift, and go to state 27
    LBRACKET    shift, and go to state 28
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 38
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 28

   23 array: LBRACKET . arithmeticExpression RBRACKET

    LPAREN      shift, and go to state 27
    LBRACKET    shift, and go to state 28
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 39
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 29

   12 patternCompare: var operandTest arithmeticExpression .
   15 arithmeticExpression: arithmeticExpression . operator arithmeticExpression

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43
    XOR    shift, and go to state 44

    $default  reduce using rule 12 (patternCompare)

    operator  go to state 45


state 30

   16 arithmeticExpression: identifier .

    $default  reduce using rule 16 (arithmeticExpression)


state 31

   18 identifier: var .

    $default  reduce using rule 18 (identifier)


state 32

   17 arithmeticExpression: array .

    $default  reduce using rule 17 (arithmeticExpression)


state 33

    4 patternAction: pattern LBRACE action RBRACE .

    $default  reduce using rule 4 (patternAction)


state 34

   20 var: VAR .
   22 arrayDefine: VAR . LBRACKET CONST RBRACKET SEMI

    LBRACKET  shift, and go to state 46

    $default  reduce using rule 20 (var)


state 35

    6 action: action statementAction .

    $default  reduce using rule 6 (action)


state 36

    7 statementAction: var . EQUAL arithmeticExpression SEMI

    EQUAL  shift, and go to state 47


state 37

    8 statementAction: arrayDefine .

    $default  reduce using rule 8 (statementAction)


state 38

   14 arithmeticExpression: LPAREN arithmeticExpression . RPAREN
   15                     | arithmeticExpression . operator arithmeticExpression

    PLUS    shift, and go to state 40
    MINUS   shift, and go to state 41
    MULT    shift, and go to state 42
    DIV     shift, and go to state 43
    XOR     shift, and go to state 44
    RPAREN  shift, and go to state 48

    operator  go to state 45


state 39

   15 arithmeticExpression: arithmeticExpression . operator arithmeticExpression
   23 array: LBRACKET arithmeticExpression . RBRACKET

    PLUS      shift, and go to state 40
    MINUS     shift, and go to state 41
    MULT      shift, and go to state 42
    DIV       shift, and go to state 43
    XOR       shift, and go to state 44
    RBRACKET  shift, and go to state 49

    operator  go to state 45


state 40

   31 operator: PLUS .

    $default  reduce using rule 31 (operator)


state 41

   32 operator: MINUS .

    $default  reduce using rule 32 (operator)


state 42

   33 operator: MULT .

    $default  reduce using rule 33 (operator)


state 43

   34 operator: DIV .

    $default  reduce using rule 34 (operator)


state 44

   35 operator: XOR .

    $default  reduce using rule 35 (operator)


state 45

   15 arithmeticExpression: arithmeticExpression operator . arithmeticExpression

    LPAREN      shift, and go to state 27
    LBRACKET    shift, and go to state 28
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 50
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 46

   22 arrayDefine: VAR LBRACKET . CONST RBRACKET SEMI

    CONST  shift, and go to state 51


state 47

    7 statementAction: var EQUAL . arithmeticExpression SEMI

    LPAREN      shift, and go to state 27
    LBRACKET    shift, and go to state 28
    VAR         shift, and go to state 5
    VAR_METHOD  shift, and go to state 6
    CONST       shift, and go to state 7

    arithmeticExpression  go to state 52
    identifier            go to state 30
    var                   go to state 31
    array                 go to state 32


state 48

   14 arithmeticExpression: LPAREN arithmeticExpression RPAREN .

    $default  reduce using rule 14 (arithmeticExpression)


state 49

   23 array: LBRACKET arithmeticExpression RBRACKET .

    $default  reduce using rule 23 (array)


state 50

   15 arithmeticExpression: arithmeticExpression . operator arithmeticExpression
   15                     | arithmeticExpression operator arithmeticExpression .

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43
    XOR    shift, and go to state 44

    PLUS      [reduce using rule 15 (arithmeticExpression)]
    MINUS     [reduce using rule 15 (arithmeticExpression)]
    MULT      [reduce using rule 15 (arithmeticExpression)]
    DIV       [reduce using rule 15 (arithmeticExpression)]
    XOR       [reduce using rule 15 (arithmeticExpression)]
    $default  reduce using rule 15 (arithmeticExpression)

    operator  go to state 45


state 51

   22 arrayDefine: VAR LBRACKET CONST . RBRACKET SEMI

    RBRACKET  shift, and go to state 53


state 52

    7 statementAction: var EQUAL arithmeticExpression . SEMI
   15 arithmeticExpression: arithmeticExpression . operator arithmeticExpression

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43
    XOR    shift, and go to state 44
    SEMI   shift, and go to state 54

    operator  go to state 45


state 53

   22 arrayDefine: VAR LBRACKET CONST RBRACKET . SEMI

    SEMI  shift, and go to state 55


state 54

    7 statementAction: var EQUAL arithmeticExpression SEMI .

    $default  reduce using rule 7 (statementAction)


state 55

   22 arrayDefine: VAR LBRACKET CONST RBRACKET SEMI .

    $default  reduce using rule 22 (arrayDefine)
