Starting parse
Entering state 0
Reading a token: --(end of buffer or a NUL)
--accepting rule at line 67 ("main")
Next token is token MAIN ()
Shifting token MAIN ()
Entering state 1
Reading a token: --accepting default rule (" ")
--accepting rule at line 42 ("(")
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 4
Reading a token: --accepting rule at line 43 (")")
Next token is token RPAREN ()
Reducing stack by rule 38 (line 134):
-> $$ = nterm argList ()
Stack now 0 1 4
Entering state 11
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 33
Reading a token: --accepting default rule (" ")
--accepting rule at line 38 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 54
Reducing stack by rule 6 (line 92):
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54
Entering state 61
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 64 ("if")
Next token is token IF ()
Shifting token IF ()
Entering state 67
Reading a token: --accepting default rule (" ")
--accepting rule at line 42 ("(")
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 79
Reading a token: --accepting rule at line 70 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 7
Reading a token: --accepting default rule (" ")
--accepting rule at line 54 ("<=")
Next token is token LEQ ()
Reducing stack by rule 34 (line 129):
   $1 = token VAR ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79
Entering state 88
Next token is token LEQ ()
Shifting token LEQ ()
Entering state 24
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("4")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 24
Entering state 45
Reading a token: --accepting default rule (" ")
--accepting rule at line 58 ("||")
Next token is token OR ()
Reducing stack by rule 31 (line 126):
   $1 = nterm expr ()
   $2 = token LEQ ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79
Entering state 88
Next token is token OR ()
Shifting token OR ()
Entering state 19
Reading a token: --accepting default rule (" ")
--accepting rule at line 70 ("x")
Next token is token VAR ()
Shifting token VAR ()
Entering state 7
Reading a token: --accepting default rule (" ")
--accepting rule at line 56 (">")
Next token is token GTR ()
Reducing stack by rule 34 (line 129):
   $1 = token VAR ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 19
Entering state 40
Next token is token GTR ()
Shifting token GTR ()
Entering state 22
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("1")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 19 40 22
Entering state 43
Reading a token: --accepting rule at line 43 (")")
Next token is token RPAREN ()
Reducing stack by rule 32 (line 127):
   $1 = nterm expr ()
   $2 = token GTR ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 19
Entering state 40
Next token is token RPAREN ()
Reducing stack by rule 25 (line 120):
   $1 = nterm expr ()
   $2 = token OR ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79
Entering state 88
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Reading a token: --accepting default rule (" ")
--accepting rule at line 38 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 102
Reducing stack by rule 6 (line 92):
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102
Entering state 107
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 70 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 69
Reading a token: --accepting default rule (" ")
--accepting rule at line 47 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 81
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("5")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 69 81
Entering state 90
Reading a token: --accepting rule at line 45 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 98
Reducing stack by rule 16 (line 109):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 73
Reducing stack by rule 8 (line 95):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102
Entering state 107
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 70 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 69
Reading a token: --accepting default rule (" ")
--accepting rule at line 47 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 81
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("6")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 69 81
Entering state 90
Reading a token: --accepting rule at line 45 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 98
Reducing stack by rule 16 (line 109):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 73
Reducing stack by rule 8 (line 95):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102
Entering state 107
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 70 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 69
Reading a token: --accepting default rule (" ")
--accepting rule at line 47 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 81
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("6")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 69 81
Entering state 90
Reading a token: --accepting rule at line 45 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 98
Reducing stack by rule 16 (line 109):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 73
Reducing stack by rule 8 (line 95):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102
Entering state 107
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 64 ("if")
Next token is token IF ()
Shifting token IF ()
Entering state 67
Reading a token: --accepting default rule (" ")
--accepting rule at line 42 ("(")
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 79
Reading a token: --accepting rule at line 70 ("x")
Next token is token VAR ()
Shifting token VAR ()
Entering state 7
Reading a token: --accepting default rule (" ")
--accepting rule at line 62 ("==")
Next token is token TEST_FOR_EQUAL ()
Reducing stack by rule 34 (line 129):
   $1 = token VAR ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 67 79
Entering state 88
Next token is token TEST_FOR_EQUAL ()
Shifting token TEST_FOR_EQUAL ()
Entering state 26
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("2")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 67 79 88 26
Entering state 47
Reading a token: --accepting rule at line 43 (")")
Next token is token RPAREN ()
Reducing stack by rule 28 (line 123):
   $1 = nterm expr ()
   $2 = token TEST_FOR_EQUAL ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 67 79
Entering state 88
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Reading a token: --accepting default rule (" ")
--accepting rule at line 38 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 102
Reducing stack by rule 6 (line 92):
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 67 79 88 96 102
Entering state 107
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 70 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 69
Reading a token: --accepting default rule (" ")
--accepting rule at line 47 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 81
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("4")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 67 79 88 96 102 107 69 81
Entering state 90
Reading a token: --accepting rule at line 45 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 98
Reducing stack by rule 16 (line 109):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 67 79 88 96 102 107
Entering state 73
Reducing stack by rule 8 (line 95):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 67 79 88 96 102 107
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 67 79 88 96 102
Entering state 107
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 74 ("/*")
--accepting rule at line 76 (" don't do this line ")
--accepting rule at line 78 ("*/")
--accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 80 ("//")
--accepting rule at line 82 (" ")
--accepting rule at line 82 ("d")
--accepting rule at line 82 ("")
--accepting rule at line 84 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 39 ("}")
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 110
Reading a token: --accepting default rule (" ")
--accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 66 ("while")
Next token is token WHILE ()
Reducing stack by rule 14 (line 103):
   $1 = token IF ()
   $2 = token LPAREN ()
   $3 = nterm expr ()
   $4 = token RPAREN ()
   $5 = token LBRACE ()
   $6 = nterm statementList ()
   $7 = token RBRACE ()
-> $$ = nterm statementIf ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 72
Reducing stack by rule 9 (line 96):
   $1 = nterm statementIf ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102
Entering state 107
Next token is token WHILE ()
Shifting token WHILE ()
Entering state 68
Reading a token: --accepting default rule (" ")
--accepting rule at line 42 ("(")
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 80
Reading a token: --accepting rule at line 70 ("d")
Next token is token VAR ()
Shifting token VAR ()
Entering state 7
Reading a token: --accepting default rule (" ")
--accepting rule at line 62 ("==")
Next token is token TEST_FOR_EQUAL ()
Reducing stack by rule 34 (line 129):
   $1 = token VAR ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80
Entering state 89
Next token is token TEST_FOR_EQUAL ()
Shifting token TEST_FOR_EQUAL ()
Entering state 26
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("3")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 26
Entering state 47
Reading a token: --accepting rule at line 43 (")")
Next token is token RPAREN ()
Reducing stack by rule 28 (line 123):
   $1 = nterm expr ()
   $2 = token TEST_FOR_EQUAL ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80
Entering state 89
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 97
Reading a token: --accepting default rule (" ")
--accepting rule at line 38 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 103
Reducing stack by rule 6 (line 92):
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 97 103
Entering state 108
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 70 ("d")
Next token is token VAR ()
Shifting token VAR ()
Entering state 69
Reading a token: --accepting default rule (" ")
--accepting rule at line 47 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 81
Reading a token: --accepting default rule (" ")
--accepting rule at line 70 ("d")
Next token is token VAR ()
Shifting token VAR ()
Entering state 7
Reading a token: --accepting default rule (" ")
--accepting rule at line 48 ("+")
Next token is token PLUS ()
Reducing stack by rule 34 (line 129):
   $1 = token VAR ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 97 103 108 69 81
Entering state 90
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 28
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("1")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 97 103 108 69 81 90 28
Entering state 49
Reading a token: --accepting default rule (" ")
--accepting rule at line 48 ("+")
Next token is token PLUS ()
Reducing stack by rule 19 (line 114):
   $1 = nterm expr ()
   $2 = token PLUS ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 97 103 108 69 81
Entering state 90
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 28
Reading a token: --accepting default rule (" ")
--accepting rule at line 70 ("d")
Next token is token VAR ()
Shifting token VAR ()
Entering state 7
Reading a token: --accepting rule at line 45 (";")
Next token is token SEMI ()
Reducing stack by rule 34 (line 129):
   $1 = token VAR ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 97 103 108 69 81 90 28
Entering state 49
Next token is token SEMI ()
Reducing stack by rule 19 (line 114):
   $1 = nterm expr ()
   $2 = token PLUS ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 97 103 108 69 81
Entering state 90
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 98
Reducing stack by rule 16 (line 109):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 97 103 108
Entering state 73
Reducing stack by rule 8 (line 95):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 97 103 108
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 68 80 89 97 103
Entering state 108
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 39 ("}")
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 111
Reducing stack by rule 13 (line 101):
   $1 = token WHILE ()
   $2 = token LPAREN ()
   $3 = nterm expr ()
   $4 = token RPAREN ()
   $5 = token LBRACE ()
   $6 = nterm statementList ()
   $7 = token RBRACE ()
-> $$ = nterm statementWhile ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 71
Reducing stack by rule 10 (line 97):
   $1 = nterm statementWhile ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102
Entering state 107
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 39 ("}")
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 110
Reading a token: --accepting default rule (" ")
--accepting rule at line 65 ("else")
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 113
Reading a token: --accepting default rule (" ")
--accepting rule at line 38 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 114
Reducing stack by rule 6 (line 92):
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 110 113 114
Entering state 115
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 70 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 69
Reading a token: --accepting default rule (" ")
--accepting rule at line 47 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 81
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("7")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 110 113 114 115 69 81
Entering state 90
Reading a token: --accepting rule at line 45 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 98
Reducing stack by rule 16 (line 109):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 110 113 114 115
Entering state 73
Reducing stack by rule 8 (line 95):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 110 113 114 115
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 110 113 114
Entering state 115
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 70 ("x")
Next token is token VAR ()
Shifting token VAR ()
Entering state 69
Reading a token: --accepting default rule (" ")
--accepting rule at line 47 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 81
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("7")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 110 113 114 115 69 81
Entering state 90
Reading a token: --accepting rule at line 45 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 98
Reducing stack by rule 16 (line 109):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 110 113 114 115
Entering state 73
Reducing stack by rule 8 (line 95):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 110 113 114 115
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54 61 67 79 88 96 102 107 110 113 114
Entering state 115
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 39 ("}")
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 116
Reducing stack by rule 15 (line 107):
   $1 = token IF ()
   $2 = token LPAREN ()
   $3 = nterm expr ()
   $4 = token RPAREN ()
   $5 = token LBRACE ()
   $6 = nterm statementList ()
   $7 = token RBRACE ()
   $8 = token ELSE ()
   $9 = token LBRACE ()
   $10 = nterm statementList ()
   $11 = token RBRACE ()
-> $$ = nterm statementIf ()
Stack now 0 1 4 11 33 54 61
Entering state 72
Reducing stack by rule 9 (line 96):
   $1 = nterm statementIf ()
-> $$ = nterm statement ()
Stack now 0 1 4 11 33 54 61
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 1 4 11 33 54
Entering state 61
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting rule at line 39 ("}")
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 65
Reducing stack by rule 4 (line 85):
   $1 = token MAIN ()
   $2 = token LPAREN ()
   $3 = nterm argList ()
   $4 = token RPAREN ()
   $5 = token LBRACE ()
   $6 = nterm statementList ()
   $7 = token RBRACE ()
-> $$ = nterm functionDefnMain ()
Stack now 0
Entering state 3
Reducing stack by rule 2 (line 82):
-> $$ = nterm functionDefnList ()
Stack now 0 3
Entering state 6
Reading a token: --accepting default rule ("	")
--accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting rule at line 70 ("foo")
Next token is token VAR ()
Shifting token VAR ()
Entering state 12
Reading a token: --accepting rule at line 42 ("(")
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 34
Reading a token: --accepting rule at line 70 ("x")
Next token is token VAR ()
Shifting token VAR ()
Entering state 55
Reducing stack by rule 45 (line 144):
-> $$ = nterm defnCommaArgList ()
Stack now 0 3 6 12 34 55
Entering state 62
Reading a token: --accepting rule at line 44 (",")
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 75
Reading a token: --accepting default rule (" ")
--accepting rule at line 70 ("y")
Next token is token VAR ()
Shifting token VAR ()
Entering state 84
Reducing stack by rule 46 (line 145):
   $1 = nterm defnCommaArgList ()
   $2 = token COMMA ()
   $3 = token VAR ()
-> $$ = nterm defnCommaArgList ()
Stack now 0 3 6 12 34 55
Entering state 62
Reading a token: --accepting rule at line 43 (")")
Next token is token RPAREN ()
Reducing stack by rule 43 (line 141):
   $1 = token VAR ()
   $2 = nterm defnCommaArgList ()
-> $$ = nterm defnArgList ()
Stack now 0 3 6 12 34
Entering state 57
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 64
Reading a token: --accepting default rule (" ")
--accepting rule at line 38 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 77
Reducing stack by rule 6 (line 92):
-> $$ = nterm statementList ()
Stack now 0 3 6 12 34 57 64 77
Entering state 86
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 70 ("n")
Next token is token VAR ()
Shifting token VAR ()
Entering state 69
Reading a token: --accepting default rule (" ")
--accepting rule at line 47 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 81
Reading a token: --accepting default rule (" ")
--accepting rule at line 68 ("3")
Next token is token CONST ()
Shifting token CONST ()
Entering state 8
Reducing stack by rule 35 (line 130):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 3 6 12 34 57 64 77 86 69 81
Entering state 90
Reading a token: --accepting rule at line 45 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 98
Reducing stack by rule 16 (line 109):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 3 6 12 34 57 64 77 86
Entering state 73
Reducing stack by rule 8 (line 95):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 3 6 12 34 57 64 77 86
Entering state 70
Reducing stack by rule 7 (line 93):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 3 6 12 34 57 64 77
Entering state 86
Reading a token: --accepting default rule ("")
--accepting rule at line 72 ("
")
--accepting rule at line 39 ("}")
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 94
Reducing stack by rule 5 (line 89):
   $1 = token VAR ()
   $2 = token LPAREN ()
   $3 = nterm defnArgList ()
   $4 = token RPAREN ()
   $5 = token LBRACE ()
   $6 = nterm statementList ()
   $7 = token RBRACE ()
-> $$ = nterm functionDefn ()
Stack now 0 3 6
Entering state 13
Reducing stack by rule 3 (line 83):
   $1 = nterm functionDefnList ()
   $2 = nterm functionDefn ()
-> $$ = nterm functionDefnList ()
Stack now 0 3
Entering state 6
Reading a token: --(end of buffer or a NUL)
--EOF (start condition 0)
Now at end of input.
Reducing stack by rule 1 (line 80):
   $1 = nterm functionDefnMain ()
   $2 = nterm functionDefnList ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Now at end of input.
Shifting token $end ()
Entering state 5
Stack now 0 2 5
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
