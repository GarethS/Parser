Starting parse
Entering state 0
Reducing stack by rule 2 (line 78):
-> $$ = nterm patternActionList ()
Stack now 0
Entering state 2
Reading a token: --(end of buffer or a NUL)
--accepting rule at line 79 ("if")
Next token is token IF ()
Shifting token IF ()
Entering state 4
Reading a token: --accepting default rule (" ")
--accepting rule at line 59 ("(")
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 6
Reading a token: --accepting rule at line 82 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 7
Reducing stack by rule 27 (line 121):
   $1 = token VAR ()
-> $$ = nterm var ()
Stack now 0 2 4 6
Entering state 12
Reading a token: --accepting rule at line 71 ("<=")
Next token is token LEQ ()
Shifting token LEQ ()
Entering state 18
Reducing stack by rule 33 (line 135):
   $1 = token LEQ ()
-> $$ = nterm operandTest ()
Stack now 0 2 4 6 12
Entering state 22
Reading a token: --accepting rule at line 81 ("4")
Next token is token CONST ()
Shifting token CONST ()
Entering state 28
Reducing stack by rule 25 (line 117):
   $1 = token CONST ()
-> $$ = nterm arithmeticExpression ()
Stack now 0 2 4 6 12 22
Entering state 30
Reading a token: --accepting rule at line 60 (")")
Next token is token RPAREN ()
Reducing stack by rule 15 (line 105):
   $1 = nterm var ()
   $2 = nterm operandTest ()
   $3 = nterm arithmeticExpression ()
-> $$ = nterm expr ()
Stack now 0 2 4 6
Entering state 11
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 16
Reading a token: --accepting default rule (" ")
--accepting rule at line 55 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 26
Reducing stack by rule 4 (line 82):
-> $$ = nterm statementList ()
Stack now 0 2 4 6 11 16 26
Entering state 33
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 82 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 27
Reading a token: --accepting default rule (" ")
--accepting rule at line 64 ("=")
Next token is token EQUAL ()
Reducing stack by rule 27 (line 121):
   $1 = token VAR ()
-> $$ = nterm var ()
Stack now 0 2 4 6 11 16 26 33
Entering state 45
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 57
Reading a token: --accepting default rule (" ")
--accepting rule at line 81 ("5")
Next token is token CONST ()
Shifting token CONST ()
Entering state 28
Reducing stack by rule 25 (line 117):
   $1 = token CONST ()
-> $$ = nterm arithmeticExpression ()
Stack now 0 2 4 6 11 16 26 33 45 57
Entering state 62
Reading a token: --accepting rule at line 62 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 66
Reducing stack by rule 10 (line 98):
   $1 = nterm var ()
   $2 = token EQUAL ()
   $3 = nterm arithmeticExpression ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 2 4 6 11 16 26 33
Entering state 44
Reducing stack by rule 6 (line 86):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 2 4 6 11 16 26 33
Entering state 43
Reducing stack by rule 5 (line 83):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 2 4 6 11 16 26
Entering state 33
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting rule at line 56 ("}")
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 41
Reading a token: --accepting default rule ("	")
--accepting default rule ("")
--accepting default rule ("
")
--accepting default rule ("	")
--(end of buffer or a NUL)
--EOF (start condition 0)
Now at end of input.
Reducing stack by rule 8 (line 90):
   $1 = token IF ()
   $2 = token LPAREN ()
   $3 = nterm expr ()
   $4 = token RPAREN ()
   $5 = token LBRACE ()
   $6 = nterm statementList ()
   $7 = token RBRACE ()
-> $$ = nterm statementIf ()
Stack now 0 2
Entering state 5
Reducing stack by rule 3 (line 79):
   $1 = nterm patternActionList ()
   $2 = nterm statementIf ()
-> $$ = nterm patternActionList ()
Stack now 0
Entering state 2
Now at end of input.
Reducing stack by rule 1 (line 73):
   $1 = nterm patternActionList ()
-> $$ = nterm program ()
Stack now 0
Entering state 1
Now at end of input.
Shifting token $end ()
Entering state 3
Stack now 0 1 3
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
