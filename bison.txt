Starting parse
Entering state 0
Reducing stack by rule 2 (line 81):
-> $$ = nterm statementList ()
Stack now 0
Entering state 2
Reading a token: --(end of buffer or a NUL)
--accepting rule at line 56 ("if")
Next token is token IF ()
Shifting token IF ()
Entering state 5
Reading a token: --accepting default rule (" ")
--accepting rule at line 36 ("(")
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 12
Reading a token: --accepting rule at line 61 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 16
Reading a token: --accepting default rule (" ")
--accepting rule at line 48 ("<=")
Next token is token LEQ ()
Reducing stack by rule 25 (line 116):
   $1 = token VAR ()
-> $$ = nterm expr ()
Stack now 0 2 5 12
Entering state 19
Next token is token LEQ ()
Shifting token LEQ ()
Entering state 30
Reading a token: --accepting default rule (" ")
--accepting rule at line 59 ("4")
Next token is token CONST ()
Shifting token CONST ()
Entering state 17
Reducing stack by rule 26 (line 117):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 30
Entering state 49
Reading a token: --accepting default rule (" ")
--accepting rule at line 52 ("||")
Next token is token OR ()
Reducing stack by rule 22 (line 113):
   $1 = nterm expr ()
   $2 = token LEQ ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 2 5 12
Entering state 19
Next token is token OR ()
Shifting token OR ()
Entering state 25
Reading a token: --accepting default rule (" ")
--accepting rule at line 61 ("x")
Next token is token VAR ()
Shifting token VAR ()
Entering state 16
Reading a token: --accepting default rule (" ")
--accepting rule at line 50 (">")
Next token is token GTR ()
Reducing stack by rule 25 (line 116):
   $1 = token VAR ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 25
Entering state 44
Next token is token GTR ()
Shifting token GTR ()
Entering state 28
Reading a token: --accepting default rule (" ")
--accepting rule at line 59 ("1")
Next token is token CONST ()
Shifting token CONST ()
Entering state 17
Reducing stack by rule 26 (line 117):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 25 44 28
Entering state 47
Reading a token: --accepting rule at line 37 (")")
Next token is token RPAREN ()
Reducing stack by rule 23 (line 114):
   $1 = nterm expr ()
   $2 = token GTR ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 25
Entering state 44
Next token is token RPAREN ()
Reducing stack by rule 18 (line 109):
   $1 = nterm expr ()
   $2 = token OR ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 2 5 12
Entering state 19
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 38
Reading a token: --accepting default rule (" ")
--accepting rule at line 32 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 57
Reducing stack by rule 2 (line 81):
-> $$ = nterm statementList ()
Stack now 0 2 5 12 19 38 57
Entering state 61
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 61 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 6
Reading a token: --accepting default rule (" ")
--accepting rule at line 41 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 13
Reading a token: --accepting default rule (" ")
--accepting rule at line 59 ("5")
Next token is token CONST ()
Shifting token CONST ()
Entering state 17
Reducing stack by rule 26 (line 117):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 38 57 61 6 13
Entering state 20
Reading a token: --accepting rule at line 39 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 39
Reducing stack by rule 9 (line 97):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 2 5 12 19 38 57 61
Entering state 9
Reducing stack by rule 4 (line 85):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 2 5 12 19 38 57 61
Entering state 7
Reducing stack by rule 3 (line 82):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 2 5 12 19 38 57
Entering state 61
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 61 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 6
Reading a token: --accepting default rule (" ")
--accepting rule at line 41 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 13
Reading a token: --accepting default rule (" ")
--accepting rule at line 59 ("6")
Next token is token CONST ()
Shifting token CONST ()
Entering state 17
Reducing stack by rule 26 (line 117):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 38 57 61 6 13
Entering state 20
Reading a token: --accepting rule at line 39 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 39
Reducing stack by rule 9 (line 97):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 2 5 12 19 38 57 61
Entering state 9
Reducing stack by rule 4 (line 85):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 2 5 12 19 38 57 61
Entering state 7
Reducing stack by rule 3 (line 82):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 2 5 12 19 38 57
Entering state 61
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 56 ("if")
Next token is token IF ()
Shifting token IF ()
Entering state 5
Reading a token: --accepting default rule (" ")
--accepting rule at line 36 ("(")
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 12
Reading a token: --accepting rule at line 61 ("x")
Next token is token VAR ()
Shifting token VAR ()
Entering state 16
Reading a token: --accepting default rule (" ")
--accepting rule at line 54 ("==")
Next token is token TEST_FOR_EQUAL ()
Reducing stack by rule 25 (line 116):
   $1 = token VAR ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 38 57 61 5 12
Entering state 19
Next token is token TEST_FOR_EQUAL ()
Shifting token TEST_FOR_EQUAL ()
Entering state 32
Reading a token: --accepting default rule (" ")
--accepting rule at line 59 ("2")
Next token is token CONST ()
Shifting token CONST ()
Entering state 17
Reducing stack by rule 26 (line 117):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 38 57 61 5 12 19 32
Entering state 51
Reading a token: --accepting rule at line 37 (")")
Next token is token RPAREN ()
Reducing stack by rule 19 (line 110):
   $1 = nterm expr ()
   $2 = token TEST_FOR_EQUAL ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 38 57 61 5 12
Entering state 19
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 38
Reading a token: --accepting default rule (" ")
--accepting rule at line 32 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 57
Reducing stack by rule 2 (line 81):
-> $$ = nterm statementList ()
Stack now 0 2 5 12 19 38 57 61 5 12 19 38 57
Entering state 61
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 61 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 6
Reading a token: --accepting default rule (" ")
--accepting rule at line 41 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 13
Reading a token: --accepting default rule (" ")
--accepting rule at line 59 ("4")
Next token is token CONST ()
Shifting token CONST ()
Entering state 17
Reducing stack by rule 26 (line 117):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 38 57 61 5 12 19 38 57 61 6 13
Entering state 20
Reading a token: --accepting rule at line 39 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 39
Reducing stack by rule 9 (line 97):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 2 5 12 19 38 57 61 5 12 19 38 57 61
Entering state 9
Reducing stack by rule 4 (line 85):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 2 5 12 19 38 57 61 5 12 19 38 57 61
Entering state 7
Reducing stack by rule 3 (line 82):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 2 5 12 19 38 57 61 5 12 19 38 57
Entering state 61
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 33 ("}")
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 63
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting rule at line 33 ("}")
Next token is token RBRACE ()
Reducing stack by rule 7 (line 90):
   $1 = token IF ()
   $2 = token LPAREN ()
   $3 = nterm expr ()
   $4 = token RPAREN ()
   $5 = token LBRACE ()
   $6 = nterm statementList ()
   $7 = token RBRACE ()
-> $$ = nterm statementIf ()
Stack now 0 2 5 12 19 38 57 61
Entering state 8
Reducing stack by rule 5 (line 86):
   $1 = nterm statementIf ()
-> $$ = nterm statement ()
Stack now 0 2 5 12 19 38 57 61
Entering state 7
Reducing stack by rule 3 (line 82):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 2 5 12 19 38 57
Entering state 61
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 63
Reading a token: --accepting default rule (" ")
--accepting rule at line 57 ("else")
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 65
Reading a token: --accepting default rule (" ")
--accepting rule at line 32 ("{")
Next token is token LBRACE ()
Shifting token LBRACE ()
Entering state 66
Reducing stack by rule 2 (line 81):
-> $$ = nterm statementList ()
Stack now 0 2 5 12 19 38 57 61 63 65 66
Entering state 67
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 61 ("counter")
Next token is token VAR ()
Shifting token VAR ()
Entering state 6
Reading a token: --accepting default rule (" ")
--accepting rule at line 41 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 13
Reading a token: --accepting default rule (" ")
--accepting rule at line 59 ("7")
Next token is token CONST ()
Shifting token CONST ()
Entering state 17
Reducing stack by rule 26 (line 117):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 38 57 61 63 65 66 67 6 13
Entering state 20
Reading a token: --accepting rule at line 39 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 39
Reducing stack by rule 9 (line 97):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 2 5 12 19 38 57 61 63 65 66 67
Entering state 9
Reducing stack by rule 4 (line 85):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 2 5 12 19 38 57 61 63 65 66 67
Entering state 7
Reducing stack by rule 3 (line 82):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 2 5 12 19 38 57 61 63 65 66
Entering state 67
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting default rule (" ")
--accepting rule at line 61 ("x")
Next token is token VAR ()
Shifting token VAR ()
Entering state 6
Reading a token: --accepting default rule (" ")
--accepting rule at line 41 ("=")
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 13
Reading a token: --accepting default rule (" ")
--accepting rule at line 59 ("7")
Next token is token CONST ()
Shifting token CONST ()
Entering state 17
Reducing stack by rule 26 (line 117):
   $1 = token CONST ()
-> $$ = nterm expr ()
Stack now 0 2 5 12 19 38 57 61 63 65 66 67 6 13
Entering state 20
Reading a token: --accepting rule at line 39 (";")
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 39
Reducing stack by rule 9 (line 97):
   $1 = token VAR ()
   $2 = token EQUAL ()
   $3 = nterm expr ()
   $4 = token SEMI ()
-> $$ = nterm statementAssign ()
Stack now 0 2 5 12 19 38 57 61 63 65 66 67
Entering state 9
Reducing stack by rule 4 (line 85):
   $1 = nterm statementAssign ()
-> $$ = nterm statement ()
Stack now 0 2 5 12 19 38 57 61 63 65 66 67
Entering state 7
Reducing stack by rule 3 (line 82):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0 2 5 12 19 38 57 61 63 65 66
Entering state 67
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting rule at line 33 ("}")
Next token is token RBRACE ()
Shifting token RBRACE ()
Entering state 68
Reducing stack by rule 8 (line 94):
   $1 = token IF ()
   $2 = token LPAREN ()
   $3 = nterm expr ()
   $4 = token RPAREN ()
   $5 = token LBRACE ()
   $6 = nterm statementList ()
   $7 = token RBRACE ()
   $8 = token ELSE ()
   $9 = token LBRACE ()
   $10 = nterm statementList ()
   $11 = token RBRACE ()
-> $$ = nterm statementIf ()
Stack now 0 2
Entering state 8
Reducing stack by rule 5 (line 86):
   $1 = nterm statementIf ()
-> $$ = nterm statement ()
Stack now 0 2
Entering state 7
Reducing stack by rule 3 (line 82):
   $1 = nterm statementList ()
   $2 = nterm statement ()
-> $$ = nterm statementList ()
Stack now 0
Entering state 2
Reading a token: --accepting default rule ("")
--accepting default rule ("
")
--accepting default rule ("	")
--(end of buffer or a NUL)
--EOF (start condition 0)
Now at end of input.
Reducing stack by rule 1 (line 75):
   $1 = nterm statementList ()
-> $$ = nterm program ()
Stack now 0
Entering state 1
Now at end of input.
Shifting token $end ()
Entering state 3
Stack now 0 1 3
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
