
Gareth Scott (c) 2011, 2012  garethjscott@gmail.com

This project describes a language to run a motor and is based on the generic 'pattern{action}' syntax used by the AWK language.
The grammar specifices a declarative language without function calls where the action statements (within { and }) are only
executed when the pattern test evaluates to true.
An example is shown below:

-------------------------------------------------------------------------------	   


	   /* Try to parse this as an experiment: */
	   counter == 4 && (m1.position >= 3 || m1.velocity < 0) {
			counter = counter + 1;
			m1.position = 2;
			
	   }

	   /* test short circuit evaluation */
	   true && (t1.time == 27 || counter == 3) || s1.open { //test
			m1.velocity = 0;	/* stop motor */
			counter ^= 2;	// new style comment
	   }

-------------------------------------------------------------------------------	   
	   
Predefined variables and their access methods and whether read-only [r] or read-write [r/w]:
1. Motor.velocity[r/w]
	    .position[r/w]
2. Timer.timeRemaining[r]
        .reset[w]
        .set[r/w]	// Set value of timer in ms
3. Switch.open[r]
         .closed[r]	
4. priority[interrupt, high, normal, low]	// 'interrupt' is the highest, 'high' runs in a normal thread, but at elevated priority		 

	  
Pending tasks (* = addressed this issue):
1. Allow each 'pattern{action}' phrase to specify the priority level it should be run at.
2.*Detect new style comment, //
3. Add regression test for scanner.
4.*Remove ECHO for non-debug version of scanner.
5. Print line number on parse error. See yylineno
6. Set operator precedence
7. Upgrade to C++ classes (yacc uses -C option, #define _CPP_IOSTREAMS too). Use g++ rather than gcc. And rename valve.y valve.ypp	
8. Dump pattern and action arrays to build table. Switch to using indices rather than pointers. Code executing in controller will do the actual infix tree traversal.

TODO:
1. Test on actual hardware
2. Implement TCP/IP communications
3. Add arrays to language
3a. Add initializing block for arrays and variables.
4. Advertising - create ad copy we'd like to see
*5. Temporary variables working
10. Add special variables: motor.position, motor.velocity, etc.
10a. input, output, time, motor
11. Make sure symbol table doesn't overflow. Do this in symbol table class.
12. Symbol class that can hold floats as well as ints
*14. Abandon evaluation on array out of bounds. Print array that overflowed
14b. Keep variable name in symbol table to print array that overflowed.
17. Loop over pattern,action and make sure it responds correctly
*18. Never change a constant in interpreter. In particular, max range of array.
19. addNodeId() needs a better name

TODO optional:
6. Multiple pattern{action} blocks
9. Add priority keyword that gets associated with pattern{action} block
7. Optimize temporary variable by reusing them when possible
13. Multi-dimensional arrays
8. Turn on short-circuit expression evaluation
15. Implement functions
16. Implement way to test different inputs and compare against regression output

25Mar12
1. Pattern tree output succesful to table in RPN order. Now write interpreter to evaluate table.

Limitations
1. There are no scoping rules. All variables are at global scope.
2. All variables are integers. There is currently no floating point support. 

Notes
1. Under Cygwin, to redirect output to a file use: ./parsetest >parse.txt 2>bison.txt
    This yields: parseTree.txt and symbolTable.txt
    Then run ./interpret which will put its output in log.txt
2. Note that ./parsetest is run from a cygwin command window. It needs access to c:\cygwin\bin\cygwin1.dll to run.
    Install a minimal cygwin to get this. To run from a DOS command prompt, add cygwin to your path using the following:
	"set Path=%Path%;c:\cygwin\bin" and then type "parsetest". It's really best just to install cygwin in the first place.
    Note: to specify a drive path under Cygwin use something list this: cd /cygdrive/c/... to get to drive C:
