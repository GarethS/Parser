
1
    // Like AWK, have a routine that gets called once, at startup
    // Assume that motor is homed
    // Can't figure out why I used m1.velocity below. What was I thinking?
    
    start {
        counter = 0;
        p1 = 400;
        p2 = 900;
        m1.position = p1;   // starts motor moving towards p1
        motion = 1;
    }

    // Motor oscillates between 2 positions
    // predicates here form the: 'pattern {action}' structure
    m1.velocity > 1 && m1.position >= p1 && counter < 4 {
        // statements here
        m1.position = p2;
        ++counter;
        motion = 2;
    }
    m1.position == p2 && motion == 2 {
        m1.position = p1;
        motion = 1;
    }

-------------------------------------------------------------------------------
2
    // Simplified version of 1
    start {
        counter = 0;
        p1 = 900;
        p2 = 400;
        m1.position = p1;   // starts motor moving towards p1
    }

    // Motor oscillates between 2 positions for 4 cycles.
    // predicates here form the: 'pattern {action}' structure
    m1.position == p1 && counter < 4 {
        // statements here
        m1.position = p2;
        ++counter;
    }
    m1.position == p2 {
        m1.position = p1;
    }

-------------------------------------------------------------------------------
3
    // Same as 2, but p1 < p2
    start {
        counter = 0;
        p1 = 400;
        p2 = 900;
        delta = m1.position - p1;   // if delta > 0, we're currently at position > p1; otherwise we're at position < p1
        m1.position = p1;   // starts motor moving towards p1
        state = 1;
    }

    state == 1 && m1.position == p1 {
        // Got to p1 for the first time, now start the cycle
        state = 2;
    }

    // Motor oscillates between 2 positions for 4 cycles.
    // N.B. This relies on p1 > p2
    // predicates here form the: 'pattern {action}' structure
    state == 2 && m1.position == p1 && counter < 4 {
        m1.position = p2;
        ++counter;
    }
    
    state == 2 && m1.position == p2 {
        m1.position = p1;
    }

-------------------------------------------------------------------------------
4
    // Do we need subroutines, like homed, to avoid lots of copy and paste? AWK uses: @include "xxxx"
    // How does someone invoke 'home' in the middle of doing something else?
    // Note one of the subtleties of homeing is to always home coming from the same direction to avoid any hysteresis effects.
 
Questions: Is this language too complex? Can you think of an easier way
to express motor movements?
 
Example of the declarative language for motor control. It's similar to AWK,
used for language processing. There are no function
calls. Everything happens at once. The code inside a NAMESPACE can be turned on
or off so that not all code is active at once. Note that the default namespace
calls the home namespace which, in turn, calls cycle namespace when the homeing
is finished.
The cycle namespace moves the motor between 2 points, waiting 1 sec at 
farPosition.
Something else to note about this language is that there is no equals (=) sign.
Instead x = 2; is written x(2);
    
    NAMESPACE home {    // Definition of a namespace called home
        // Note that if the flag is in the home gate, we'll move away and
        //  approach it from one direction to detect home.
        BEGIN {
            // BEGIN happens once, when a namespace is invoked.
            awayFromHome(1000);
            towardsHome(-awayFromHome); 
            readyPosition(100);
            // Don't know the current position yet.
            // We'll just set it to 0, even thought we don't really know
            //  where we are yet.
            m1.position(0);  
            initialHomedSwitch(s1.value);
            
            approachDirectionOK(true);
            if (initialHomedSwitch == open) {
                m1.moveTo(towardsHome);
            } else {
                // We need to come out of the home gate and then start moving
                //  towards it.
                approachDirectionOK(false);
                m1.moveTo(awayFromHome);
            }
        }

        s1.value == !initialHomedSwitch {
            // Switch just flipped from on to off or off to on
            m1.position(0);     // Set the motor position to 0.
            // If we're homing from the wrong direction we'll get it when we 
            //  trip the home flag next time
            m1.moveTo(readyPosition);  
        }

        m1.position() == readyPosition {
            if (approachDirectionOK) {
                namespace(cycle);       // Done homeing!
                // Switch to cycle namespace. This namespace is now inactive
            } else {
                // Only get here if we're not homed and the motor moved out
                //  of the home position to the ready position
                approachDirectionOK(true);
                m1.moveTo(towardsHome);
                // Now the normal home routine will pick up the home going
                //  in the correct direction
            }
        }
    }
    
    NAMESPACE default { // This is the namespace that is in effect at startup
        BEGIN {
            // Activate the home namespace. The default namespace is inactive
            //  until reactivated in home above.
            namespace(home);    
        }
    }

    NAMESPACE cycle { // This comes in effect after homing
        // This namespace moves the motor to farPostion, waits 1s, then
        //  returns to readyPosition. It repeats this 20x.
        BEGIN {
            farPosition(900);
            t1.set(0);
            setTimer(false);    // Just a variable, setTimer.
            m1.moveTo(farPosition);
        }
    
        m1.position() == farPosition {
            if (!setTimer) {
                setTimer(true);
                t1.set(1000);   // Set timer1 to 1000 ms and start counting.
            } else {
                if (t1.tick() == 0) {
                    // We're at farPosition and the timer has expired, 
                    //  now move to readyPosition.
                    m1.moveTo(readyPosition);
                }
            }
        }
        
        m1.position == readyPosition {
            setTimer(false);
            m1.moveTo(farPosition);
        }
    }
    
    ....
    
    // Taking note from above, suppose on the 500th iteration of a move we want to home. Do something like this, make home a user defined function:
    
    function home() {
    }
    
    count == 500 {
        home();
    }
    
-------------------------------------------------------------------------------

	   /* Try to parse this as an experiment: */
	   counter == 4 && (m1.position >= 3 || m1.velocity < 0) {
			counter = counter + 1;	/* inc */
			m1.position = 2;
			
	   }

	   /* test short circuit evaluation */
	   true && (t1.time == 27 || counter == 3) || s1.open { //test
			m1.velocity = 0;	/* stop motor */
			counter = counter ^ 2;	// new style comment
	   }